{"ast":null,"code":"import { NgZone, Injectable, Inject, PLATFORM_ID, defineInjectable, inject, InjectionToken, INJECTOR, ɵglobal, Optional, SkipSelf, ErrorHandler, Injector, ɵivyEnabled, NgModule, APP_BOOTSTRAP_LISTENER } from '@angular/core';\nimport { memoize, INITIAL_STATE_TOKEN, NgxsBootstrapper, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, InitialState } from '@ngxs/store/internals';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, Subject, BehaviorSubject, of, forkJoin, throwError, EMPTY, from, queueScheduler } from 'rxjs';\nimport { filter, map, shareReplay, take, exhaustMap, mergeMap, defaultIfEmpty, catchError, takeUntil, tap, observeOn, distinctUntilChanged } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} name\n * @return {?}\n */\n\nfunction throwStateNameError(name) {\n  throw new Error(`${name} is not a valid state name. It needs to be a valid object property name.`);\n}\n/**\n * @return {?}\n */\n\n\nfunction throwStateNamePropertyError() {\n  throw new Error(`States must register a 'name' property.`);\n}\n/**\n * @param {?} current\n * @param {?} newName\n * @param {?} oldName\n * @return {?}\n */\n\n\nfunction throwStateUniqueError(current, newName, oldName) {\n  throw new Error(`State name '${current}' from ${newName} already exists in ${oldName}.`);\n}\n/**\n * @param {?} name\n * @return {?}\n */\n\n\nfunction throwStateDecoratorError(name) {\n  throw new Error(`States must be decorated with @State() decorator, but \"${name}\" isn't.`);\n}\n/**\n * @return {?}\n */\n\n\nfunction throwActionDecoratorError() {\n  throw new Error('@Action() decorator cannot be used with static methods.');\n}\n/**\n * @return {?}\n */\n\n\nfunction throwSelectorDecoratorError() {\n  throw new Error('Selectors only work on methods.');\n}\n/**\n * @return {?}\n */\n\n\nfunction getZoneWarningMessage() {\n  return 'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' + 'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' + 'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })';\n}\n/**\n * @param {?} name\n * @return {?}\n */\n\n\nfunction getUndecoratedStateInIvyWarningMessage(name) {\n  return `'${name}' class should be decorated with @Injectable() right after the @State() decorator`;\n}\n/**\n * @return {?}\n */\n\n\nfunction throwSelectFactoryNotConnectedError() {\n  throw new Error('You have forgotten to import the NGXS module!');\n}\n/**\n * @return {?}\n */\n\n\nfunction throwPatchingArrayError() {\n  throw new Error('Patching arrays is not supported.');\n}\n/**\n * @return {?}\n */\n\n\nfunction throwPatchingPrimitiveError() {\n  throw new Error('Patching primitives is not supported.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass DispatchOutsideZoneNgxsExecutionStrategy {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platformId\n   */\n  constructor(_ngZone, _platformId) {\n    this._ngZone = _ngZone;\n    this._platformId = _platformId; // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      verifyZoneIsNotNooped(_ngZone);\n    }\n  }\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  enter(func) {\n    if (isPlatformServer(this._platformId)) {\n      return this.runInsideAngular(func);\n    }\n\n    return this.runOutsideAngular(func);\n  }\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  leave(func) {\n    return this.runInsideAngular(func);\n  }\n  /**\n   * @private\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  runInsideAngular(func) {\n    if (NgZone.isInAngularZone()) {\n      return func();\n    }\n\n    return this._ngZone.run(func);\n  }\n  /**\n   * @private\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  runOutsideAngular(func) {\n    if (NgZone.isInAngularZone()) {\n      return this._ngZone.runOutsideAngular(func);\n    }\n\n    return func();\n  }\n\n}\n\nDispatchOutsideZoneNgxsExecutionStrategy.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\n\nDispatchOutsideZoneNgxsExecutionStrategy.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: String,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}];\n/** @nocollapse */\n\n\nDispatchOutsideZoneNgxsExecutionStrategy.ngInjectableDef = defineInjectable({\n  factory: function DispatchOutsideZoneNgxsExecutionStrategy_Factory() {\n    return new DispatchOutsideZoneNgxsExecutionStrategy(inject(NgZone), inject(PLATFORM_ID));\n  },\n  token: DispatchOutsideZoneNgxsExecutionStrategy,\n  providedIn: \"root\"\n});\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  DispatchOutsideZoneNgxsExecutionStrategy.prototype._ngZone;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  DispatchOutsideZoneNgxsExecutionStrategy.prototype._platformId;\n} // Caretaker note: this should exist as a separate function and not a class method,\n// since class methods are not tree-shakable.\n\n/**\n * @param {?} ngZone\n * @return {?}\n */\n\n\nfunction verifyZoneIsNotNooped(ngZone) {\n  // `NoopNgZone` is not exposed publicly as it doesn't expect\n  // to be used outside of the core Angular code, thus we just have\n  // to check if the zone doesn't extend or instanceof `NgZone`.\n  if (ngZone instanceof NgZone) {\n    return;\n  }\n\n  console.warn(getZoneWarningMessage());\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst ROOT_STATE_TOKEN = new InjectionToken('ROOT_STATE_TOKEN');\n/** @type {?} */\n\nconst FEATURE_STATE_TOKEN = new InjectionToken('FEATURE_STATE_TOKEN');\n/** @type {?} */\n\nconst NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\n/** @type {?} */\n\nconst META_KEY = 'NGXS_META';\n/** @type {?} */\n\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\n/** @type {?} */\n\nconst SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\n/**\n * The NGXS config settings.\n */\n\nclass NgxsConfig {\n  constructor() {\n    /**\n     * Defining the default state before module initialization\n     * This is convenient if we need to create a define our own set of states.\n     * @deprecated will be removed after v4\n     * (default: {})\n     */\n    this.defaultsState = {};\n    /**\n     * Defining shared selector options\n     */\n\n    this.selectorOptions = {\n      injectContainerState: true,\n      // TODO: default is true in v3, will change in v4\n      suppressErrors: true // TODO: default is true in v3, will change in v4\n\n    };\n    this.compatibility = {\n      strictContentSecurityPolicy: false\n    };\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\n  }\n\n}\n\nNgxsConfig.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nNgxsConfig.ctorParameters = () => [];\n\nif (false) {\n  /**\n   * Run in development mode. This will add additional debugging features:\n   * - Object.freeze on the state and actions to guarantee immutability\n   * (default: false)\n   *\n   * Note: this property will be accounted only in development mode when using the Ivy compiler.\n   * It makes sense to use it only during development to ensure there're no state mutations.\n   * When building for production, the Object.freeze will be tree-shaken away.\n   * @type {?}\n   */\n  NgxsConfig.prototype.developmentMode;\n  /** @type {?} */\n\n  NgxsConfig.prototype.compatibility;\n  /**\n   * Determines the execution context to perform async operations inside. An implementation can be\n   * provided to override the default behaviour where the async operations are run\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\n   * These observable behaviours are from:\n   *   `\\@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\n   * application doesn't rely on zone.js running change detection then you can switch to the\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\n   * (default: null)\n   * @type {?}\n   */\n\n  NgxsConfig.prototype.executionStrategy;\n  /**\n   * Defining the default state before module initialization\n   * This is convenient if we need to create a define our own set of states.\n   * @deprecated will be removed after v4\n   * (default: {})\n   * @type {?}\n   */\n\n  NgxsConfig.prototype.defaultsState;\n  /**\n   * Defining shared selector options\n   * @type {?}\n   */\n\n  NgxsConfig.prototype.selectorOptions;\n}\n/**\n * State context provided to the actions in the state.\n * @record\n * @template T\n */\n\n\nfunction StateContext() {}\n\nif (false) {\n  /**\n   * Get the current state.\n   * @return {?}\n   */\n  StateContext.prototype.getState = function () {};\n  /**\n   * Reset the state to a new value.\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  StateContext.prototype.setState = function (val) {};\n  /**\n   * Patch the existing state with the provided value.\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  StateContext.prototype.patchState = function (val) {};\n  /**\n   * Dispatch a new action and return the dispatched observable.\n   * @param {?} actions\n   * @return {?}\n   */\n\n\n  StateContext.prototype.dispatch = function (actions) {};\n}\n/**\n * Plugin interface\n * @record\n */\n\n\nfunction NgxsPlugin() {}\n\nif (false) {\n  /**\n   * Handle the state/action before its submitted to the state handlers.\n   * @param {?} state\n   * @param {?} action\n   * @param {?} next\n   * @return {?}\n   */\n  NgxsPlugin.prototype.handle = function (state, action, next) {};\n}\n/**\n * Options that can be provided to the store.\n * @record\n * @template T\n */\n\n\nfunction StoreOptions() {}\n\nif (false) {\n  /**\n   * Name of the state. Required.\n   * @type {?}\n   */\n  StoreOptions.prototype.name;\n  /**\n   * Default values for the state. If not provided, uses empty object.\n   * @type {?|undefined}\n   */\n\n  StoreOptions.prototype.defaults;\n  /**\n   * Sub states for the given state.\n   * @type {?|undefined}\n   */\n\n  StoreOptions.prototype.children;\n}\n/**\n * Represents a basic change from a previous to a new value for a single state instance.\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\n * @template T\n */\n\n\nclass NgxsSimpleChange {\n  /**\n   * @param {?} previousValue\n   * @param {?} currentValue\n   * @param {?} firstChange\n   */\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  NgxsSimpleChange.prototype.previousValue;\n  /** @type {?} */\n\n  NgxsSimpleChange.prototype.currentValue;\n  /** @type {?} */\n\n  NgxsSimpleChange.prototype.firstChange;\n}\n/**\n * On init interface\n * @record\n */\n\n\nfunction NgxsOnInit() {}\n\nif (false) {\n  /**\n   * @param {?} ctx\n   * @return {?}\n   */\n  NgxsOnInit.prototype.ngxsOnInit = function (ctx) {};\n}\n/**\n * On change interface\n * @record\n */\n\n\nfunction NgxsOnChanges() {}\n\nif (false) {\n  /**\n   * @param {?} change\n   * @return {?}\n   */\n  NgxsOnChanges.prototype.ngxsOnChanges = function (change) {};\n}\n/**\n * After bootstrap interface\n * @record\n */\n\n\nfunction NgxsAfterBootstrap() {}\n\nif (false) {\n  /**\n   * @param {?} ctx\n   * @return {?}\n   */\n  NgxsAfterBootstrap.prototype.ngxsAfterBootstrap = function (ctx) {};\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass NoopNgxsExecutionStrategy {\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n  enter(func) {\n    return func();\n  }\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  leave(func) {\n    return func();\n  }\n\n}\n\nNoopNgxsExecutionStrategy.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\n/** @nocollapse */\n\nNoopNgxsExecutionStrategy.ngInjectableDef = defineInjectable({\n  factory: function NoopNgxsExecutionStrategy_Factory() {\n    return new NoopNgxsExecutionStrategy();\n  },\n  token: NoopNgxsExecutionStrategy,\n  providedIn: \"root\"\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * The strategy that might be provided by users through `options.executionStrategy`.\n * @type {?}\n */\n\nconst USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');\n/*\n * Internal execution strategy injection token\n */\n\n/** @type {?} */\n\nconst NGXS_EXECUTION_STRATEGY = new InjectionToken('NGXS_EXECUTION_STRATEGY', {\n  providedIn: 'root',\n  factory:\n  /**\n  * @return {?}\n  */\n  () => {\n    /** @type {?} */\n    const injector = inject(INJECTOR);\n    /** @type {?} */\n\n    const executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);\n    return executionStrategy ? injector.get(executionStrategy) : injector.get(typeof ɵglobal.Zone !== 'undefined' ? DispatchOutsideZoneNgxsExecutionStrategy : NoopNgxsExecutionStrategy);\n  }\n});\n/**\n * @record\n */\n\nfunction NgxsExecutionStrategy() {}\n\nif (false) {\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n  NgxsExecutionStrategy.prototype.enter = function (func) {};\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  NgxsExecutionStrategy.prototype.leave = function (func) {};\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns the type from an action instance/class.\n * @ignore\n * @param {?} action\n * @return {?}\n */\n\n\nfunction getActionTypeFromInstance(action) {\n  if (action.constructor && action.constructor.type) {\n    return action.constructor.type;\n  } else {\n    return action.type;\n  }\n}\n/**\n * Matches a action\n * @ignore\n * @param {?} action1\n * @return {?}\n */\n\n\nfunction actionMatcher(action1) {\n  /** @type {?} */\n  const type1 = getActionTypeFromInstance(action1);\n  return (\n    /**\n    * @param {?} action2\n    * @return {?}\n    */\n    function (action2) {\n      return type1 === getActionTypeFromInstance(action2);\n    }\n  );\n}\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n * @type {?}\n */\n\n\nconst setValue =\n/**\n* @param {?} obj\n* @param {?} prop\n* @param {?} val\n* @return {?}\n*/\n(obj, prop, val) => {\n  obj = Object.assign({}, obj);\n  /** @type {?} */\n\n  const split = prop.split('.');\n  /** @type {?} */\n\n  const lastIndex = split.length - 1;\n  split.reduce(\n  /**\n  * @param {?} acc\n  * @param {?} part\n  * @param {?} index\n  * @return {?}\n  */\n  (acc, part, index) => {\n    if (index === lastIndex) {\n      acc[part] = val;\n    } else {\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : Object.assign({}, acc[part]);\n    }\n\n    return acc && acc[part];\n  }, obj);\n  return obj;\n};\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n * @type {?}\n */\n\n\nconst getValue =\n/**\n* @param {?} obj\n* @param {?} prop\n* @return {?}\n*/\n(obj, prop) => prop.split('.').reduce(\n/**\n* @param {?} acc\n* @param {?} part\n* @return {?}\n*/\n(acc, part) => acc && acc[part], obj);\n/**\n * Simple object check.\n *\n *    isObject({a:1}) //=> true\n *    isObject(1) //=> false\n *\n * @ignore\n * @type {?}\n */\n\n\nconst isObject =\n/**\n* @param {?} item\n* @return {?}\n*/\nitem => {\n  return item && typeof item === 'object' && !Array.isArray(item);\n};\n/**\n * Deep merge two objects.\n *\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\n *\n * \\@param base base object onto which `sources` will be applied\n * @type {?}\n */\n\n\nconst mergeDeep =\n/**\n* @param {?} base\n* @param {...?} sources\n* @return {?}\n*/\n(base, ...sources) => {\n  if (!sources.length) return base;\n  /** @type {?} */\n\n  const source = sources.shift();\n\n  if (isObject(base) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!base[key]) Object.assign(base, {\n          [key]: {}\n        });\n        mergeDeep(base[key], source[key]);\n      } else {\n        Object.assign(base, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n\n  return mergeDeep(base, ...sources);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n * @template T, U\n */\n\n\nfunction StateClassInternal() {}\n\nif (false) {\n  /* Skipping unnamed member:\n  [META_KEY]?: MetaDataModel;*/\n\n  /* Skipping unnamed member:\n  [META_OPTIONS_KEY]?: StoreOptions<U>;*/\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction StateOperations() {}\n\nif (false) {\n  /**\n   * @return {?}\n   */\n  StateOperations.prototype.getState = function () {};\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  StateOperations.prototype.setState = function (val) {};\n  /**\n   * @param {?} actionOrActions\n   * @return {?}\n   */\n\n\n  StateOperations.prototype.dispatch = function (actionOrActions) {};\n}\n/**\n * @record\n */\n\n\nfunction MetaDataModel() {}\n\nif (false) {\n  /** @type {?} */\n  MetaDataModel.prototype.name;\n  /** @type {?} */\n\n  MetaDataModel.prototype.actions;\n  /** @type {?} */\n\n  MetaDataModel.prototype.defaults;\n  /** @type {?} */\n\n  MetaDataModel.prototype.path;\n  /** @type {?} */\n\n  MetaDataModel.prototype.makeRootSelector;\n  /** @type {?|undefined} */\n\n  MetaDataModel.prototype.children;\n}\n/**\n * @record\n */\n\n\nfunction RuntimeSelectorContext() {}\n\nif (false) {\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n  RuntimeSelectorContext.prototype.getStateGetter = function (key) {};\n  /**\n   * @param {?=} localOptions\n   * @return {?}\n   */\n\n\n  RuntimeSelectorContext.prototype.getSelectorOptions = function (localOptions) {};\n}\n/**\n * @record\n */\n\n\nfunction SharedSelectorOptions() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  SharedSelectorOptions.prototype.injectContainerState;\n  /** @type {?|undefined} */\n\n  SharedSelectorOptions.prototype.suppressErrors;\n}\n/**\n * @record\n */\n\n\nfunction SelectorMetaDataModel() {}\n\nif (false) {\n  /** @type {?} */\n  SelectorMetaDataModel.prototype.makeRootSelector;\n  /** @type {?} */\n\n  SelectorMetaDataModel.prototype.originalFn;\n  /** @type {?} */\n\n  SelectorMetaDataModel.prototype.containerClass;\n  /** @type {?} */\n\n  SelectorMetaDataModel.prototype.selectorName;\n  /** @type {?} */\n\n  SelectorMetaDataModel.prototype.getSelectorOptions;\n}\n/**\n * @record\n */\n\n\nfunction MappedStore() {}\n\nif (false) {\n  /** @type {?} */\n  MappedStore.prototype.name;\n  /** @type {?} */\n\n  MappedStore.prototype.isInitialised;\n  /** @type {?} */\n\n  MappedStore.prototype.actions;\n  /** @type {?} */\n\n  MappedStore.prototype.defaults;\n  /** @type {?} */\n\n  MappedStore.prototype.instance;\n  /** @type {?} */\n\n  MappedStore.prototype.path;\n}\n/**\n * @record\n */\n\n\nfunction StatesAndDefaults() {}\n\nif (false) {\n  /** @type {?} */\n  StatesAndDefaults.prototype.defaults;\n  /** @type {?} */\n\n  StatesAndDefaults.prototype.states;\n}\n/**\n * @record\n * @template T\n */\n\n\nfunction RootStateDiff() {}\n\nif (false) {\n  /** @type {?} */\n  RootStateDiff.prototype.currentAppState;\n  /** @type {?} */\n\n  RootStateDiff.prototype.newAppState;\n}\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\n\n\nfunction ensureStoreMetadata(target) {\n  if (!target.hasOwnProperty(META_KEY)) {\n    /** @type {?} */\n    const defaultMetadata = {\n      name: null,\n      actions: {},\n      defaults: {},\n      path: null,\n\n      /**\n       * @param {?} context\n       * @return {?}\n       */\n      makeRootSelector(context) {\n        return context.getStateGetter(defaultMetadata.name);\n      },\n\n      children: []\n    };\n    Object.defineProperty(target, META_KEY, {\n      value: defaultMetadata\n    });\n  }\n\n  return getStoreMetadata(target);\n}\n/**\n * Get the metadata attached to the state class if it exists.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\n\n\nfunction getStoreMetadata(target) {\n  return (\n    /** @type {?} */\n    target[META_KEY]\n  );\n}\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\n\n\nfunction ensureSelectorMetadata(target) {\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\n    /** @type {?} */\n    const defaultMetadata = {\n      makeRootSelector: null,\n      originalFn: null,\n      containerClass: null,\n      selectorName: null,\n      getSelectorOptions:\n      /**\n      * @return {?}\n      */\n      () => ({})\n    };\n    Object.defineProperty(target, SELECTOR_META_KEY, {\n      value: defaultMetadata\n    });\n  }\n\n  return getSelectorMetadata(target);\n}\n/**\n * Get the metadata attached to the selector if it exists.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\n\n\nfunction getSelectorMetadata(target) {\n  return target[SELECTOR_META_KEY];\n}\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\n *\n * @ignore\n * @param {?} paths\n * @return {?}\n */\n\n\nfunction compliantPropGetter(paths) {\n  /** @type {?} */\n  const copyOfPaths = paths.slice();\n  return (\n    /**\n    * @param {?} obj\n    * @return {?}\n    */\n    obj => copyOfPaths.reduce(\n    /**\n    * @param {?} acc\n    * @param {?} part\n    * @return {?}\n    */\n    (acc, part) => acc && acc[part], obj)\n  );\n}\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n * @param {?} paths\n * @return {?}\n */\n\n\nfunction fastPropGetter(paths) {\n  /** @type {?} */\n  const segments = paths;\n  /** @type {?} */\n\n  let seg = 'store.' + segments[0];\n  /** @type {?} */\n\n  let i = 0;\n  /** @type {?} */\n\n  const l = segments.length;\n  /** @type {?} */\n\n  let expr = seg;\n\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n  /** @type {?} */\n\n\n  const fn = new Function('store', 'return ' + expr + ';');\n  return (\n    /** @type {?} */\n    fn\n  );\n}\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n * @param {?} paths\n * @param {?} config\n * @return {?}\n */\n\n\nfunction propGetter(paths, config) {\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\n    return compliantPropGetter(paths);\n  } else {\n    return fastPropGetter(paths);\n  }\n}\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n * @param {?} stateClasses\n * @return {?}\n */\n\n\nfunction buildGraph(stateClasses) {\n  /** @type {?} */\n  const findName =\n  /**\n  * @param {?} stateClass\n  * @return {?}\n  */\n  stateClass => {\n    /** @type {?} */\n    const meta = stateClasses.find(\n    /**\n    * @param {?} g\n    * @return {?}\n    */\n    g => g === stateClass); // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && !meta) {\n      throw new Error(`Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`);\n    }\n\n    return (\n      /** @type {?} */\n\n      /** @type {?} */\n\n      /** @type {?} */\n      meta[META_KEY].name\n    );\n  };\n\n  return stateClasses.reduce(\n  /**\n  * @param {?} result\n  * @param {?} stateClass\n  * @return {?}\n  */\n  (result, stateClass) => {\n    const {\n      name,\n      children\n    } =\n    /** @type {?} */\n    stateClass[META_KEY];\n    result[\n    /** @type {?} */\n    name] = (children || []).map(findName);\n    return result;\n  }, {});\n}\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n * @param {?} states\n * @return {?}\n */\n\n\nfunction nameToState(states) {\n  return states.reduce(\n  /**\n  * @param {?} result\n  * @param {?} stateClass\n  * @return {?}\n  */\n  (result, stateClass) => {\n    /** @type {?} */\n    const meta =\n    /** @type {?} */\n    stateClass[META_KEY];\n    result[\n    /** @type {?} */\n    meta.name] = stateClass;\n    return result;\n  }, {});\n}\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n * @param {?} obj\n * @param {?=} newObj\n * @return {?}\n */\n\n\nfunction findFullParentPath(obj, newObj = {}) {\n  /** @type {?} */\n  const visit =\n  /**\n  * @param {?} child\n  * @param {?} keyToFind\n  * @return {?}\n  */\n  (child, keyToFind) => {\n    for (const key in child) {\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n        /** @type {?} */\n        const parent = visit(child, key);\n        return parent !== null ? `${parent}.${key}` : key;\n      }\n    }\n\n    return null;\n  };\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      /** @type {?} */\n      const parent = visit(obj, key);\n      newObj[key] = parent ? `${parent}.${key}` : key;\n    }\n  }\n\n  return newObj;\n}\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n * @param {?} graph\n * @return {?}\n */\n\n\nfunction topologicalSort(graph) {\n  /** @type {?} */\n  const sorted = [];\n  /** @type {?} */\n\n  const visited = {};\n  /** @type {?} */\n\n  const visit =\n  /**\n  * @param {?} name\n  * @param {?=} ancestors\n  * @return {?}\n  */\n  (name, ancestors = []) => {\n    if (!Array.isArray(ancestors)) {\n      ancestors = [];\n    }\n\n    ancestors.push(name);\n    visited[name] = true;\n    graph[name].forEach(\n    /**\n    * @param {?} dep\n    * @return {?}\n    */\n    dep => {\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && ancestors.indexOf(dep) >= 0) {\n        throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\n      }\n\n      if (visited[dep]) {\n        return;\n      }\n\n      visit(dep, ancestors.slice(0));\n    });\n\n    if (sorted.indexOf(name) < 0) {\n      sorted.push(name);\n    }\n  };\n\n  Object.keys(graph).forEach(\n  /**\n  * @param {?} k\n  * @return {?}\n  */\n  k => visit(k));\n  return sorted.reverse();\n}\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n * @param {?} obj\n * @return {?}\n */\n\n\nfunction isObject$1(obj) {\n  return typeof obj === 'object' && obj !== null || typeof obj === 'function';\n}\n/**\n * @template T\n * @param {?} mappedStore\n * @param {?} diff\n * @return {?}\n */\n\n\nfunction getStateDiffChanges(mappedStore, diff) {\n  /** @type {?} */\n  const previousValue = getValue(diff.currentAppState, mappedStore.path);\n  /** @type {?} */\n\n  const currentValue = getValue(diff.newAppState, mappedStore.path);\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n * @template T, E\n */\n\n\nfunction ActionCompletion() {}\n\nif (false) {\n  /** @type {?} */\n  ActionCompletion.prototype.action;\n  /** @type {?} */\n\n  ActionCompletion.prototype.result;\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\n\n\nfunction ofAction(...allowedTypes) {\n  return ofActionOperator(allowedTypes);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\n\n\nfunction ofActionDispatched(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"DISPATCHED\"\n  /* Dispatched */\n  ]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\n\n\nfunction ofActionSuccessful(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"SUCCESSFUL\"\n  /* Successful */\n  ]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\n\n\nfunction ofActionCanceled(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"CANCELED\"\n  /* Canceled */\n  ]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been completed\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\n\n\nfunction ofActionCompleted(...allowedTypes) {\n  /** @type {?} */\n  const allowedStatuses = [\"SUCCESSFUL\"\n  /* Successful */\n  , \"CANCELED\"\n  /* Canceled */\n  , \"ERRORED\"\n  /* Errored */\n  ];\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\n\n\nfunction ofActionErrored(...allowedTypes) {\n  return ofActionOperator(allowedTypes, [\"ERRORED\"\n  /* Errored */\n  ]);\n}\n/**\n * @param {?} allowedTypes\n * @param {?=} statuses\n * @param {?=} mapOperator\n * @return {?}\n */\n\n\nfunction ofActionOperator(allowedTypes, statuses, // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\n// since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\n// defaults to `any`, thus there is no sense from union type.\nmapOperator = mapAction) {\n  /** @type {?} */\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\n  /** @type {?} */\n\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\n  return (\n    /**\n    * @param {?} o\n    * @return {?}\n    */\n    function (o) {\n      return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\n    }\n  );\n}\n/**\n * @param {?} allowedTypes\n * @param {?=} allowedStatuses\n * @return {?}\n */\n\n\nfunction filterStatus(allowedTypes, allowedStatuses) {\n  return filter(\n  /**\n  * @param {?} ctx\n  * @return {?}\n  */\n  ctx => {\n    /** @type {?} */\n    const actionType =\n    /** @type {?} */\n    getActionTypeFromInstance(ctx.action);\n    /** @type {?} */\n\n    const typeMatch = allowedTypes[actionType];\n    /** @type {?} */\n\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\n    return typeMatch && statusMatch;\n  });\n}\n/**\n * @return {?}\n */\n\n\nfunction mapActionResult() {\n  return map(\n  /**\n  * @param {?} __0\n  * @return {?}\n  */\n  ({\n    action,\n    status,\n    error\n  }) => {\n    return (\n      /** @type {?} */\n      {\n        action,\n        result: {\n          successful: \"SUCCESSFUL\"\n          /* Successful */\n          === status,\n          canceled: \"CANCELED\"\n          /* Canceled */\n          === status,\n          error\n        }\n      }\n    );\n  });\n}\n/**\n * @template T\n * @return {?}\n */\n\n\nfunction mapAction() {\n  return map(\n  /**\n  * @param {?} ctx\n  * @return {?}\n  */\n  ctx =>\n  /** @type {?} */\n  ctx.action);\n}\n/**\n * @record\n */\n\n\nfunction FilterMap() {}\n/**\n * @param {?} types\n * @return {?}\n */\n\n\nfunction createAllowedActionTypesMap(types) {\n  return types.reduce(\n  /**\n  * @param {?} filterMap\n  * @param {?} klass\n  * @return {?}\n  */\n  (filterMap, klass) => {\n    filterMap[\n    /** @type {?} */\n    getActionTypeFromInstance(klass)] = true;\n    return filterMap;\n  },\n  /** @type {?} */\n  {});\n}\n/**\n * @param {?} statuses\n * @return {?}\n */\n\n\nfunction createAllowedStatusesMap(statuses) {\n  return statuses.reduce(\n  /**\n  * @param {?} filterMap\n  * @param {?} status\n  * @return {?}\n  */\n  (filterMap, status) => {\n    filterMap[status] = true;\n    return filterMap;\n  },\n  /** @type {?} */\n  {});\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns operator that will run\n * `subscribe` outside of the ngxs execution context\n * @template T\n * @param {?} ngxsExecutionStrategy\n * @return {?}\n */\n\n\nfunction leaveNgxs(ngxsExecutionStrategy) {\n  return (\n    /**\n    * @param {?} source\n    * @return {?}\n    */\n    source => {\n      return new Observable(\n      /**\n      * @param {?} sink\n      * @return {?}\n      */\n      sink => {\n        return source.subscribe({\n          /**\n           * @param {?} value\n           * @return {?}\n           */\n          next(value) {\n            ngxsExecutionStrategy.leave(\n            /**\n            * @return {?}\n            */\n            () => sink.next(value));\n          },\n\n          /**\n           * @param {?} error\n           * @return {?}\n           */\n          error(error) {\n            ngxsExecutionStrategy.leave(\n            /**\n            * @return {?}\n            */\n            () => sink.error(error));\n          },\n\n          /**\n           * @return {?}\n           */\n          complete() {\n            ngxsExecutionStrategy.leave(\n            /**\n            * @return {?}\n            */\n            () => sink.complete());\n          }\n\n        });\n      });\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass InternalNgxsExecutionStrategy {\n  /**\n   * @param {?} _executionStrategy\n   */\n  constructor(_executionStrategy) {\n    this._executionStrategy = _executionStrategy;\n  }\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  enter(func) {\n    return this._executionStrategy.enter(func);\n  }\n  /**\n   * @template T\n   * @param {?} func\n   * @return {?}\n   */\n\n\n  leave(func) {\n    return this._executionStrategy.leave(func);\n  }\n\n}\n\nInternalNgxsExecutionStrategy.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nInternalNgxsExecutionStrategy.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [NGXS_EXECUTION_STRATEGY]\n  }]\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  InternalNgxsExecutionStrategy.prototype._executionStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {string} */\n\n\nconst ActionStatus = {\n  Dispatched: 'DISPATCHED',\n  Successful: 'SUCCESSFUL',\n  Canceled: 'CANCELED',\n  Errored: 'ERRORED'\n};\n/**\n * @record\n * @template T\n */\n\nfunction ActionContext() {}\n\nif (false) {\n  /** @type {?} */\n  ActionContext.prototype.status;\n  /** @type {?} */\n\n  ActionContext.prototype.action;\n  /** @type {?|undefined} */\n\n  ActionContext.prototype.error;\n}\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n * subject.subscribe(value => {\n * if (value === 'start') subject.next('end');\n * });\n * subject.subscribe(value => { });\n * subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n * @template T\n */\n\n\nclass OrderedSubject extends Subject {\n  constructor() {\n    super(...arguments);\n    this._itemQueue = [];\n    this._busyPushingNext = false;\n  }\n  /**\n   * @param {?=} value\n   * @return {?}\n   */\n\n\n  next(value) {\n    if (this._busyPushingNext) {\n      this._itemQueue.unshift(\n      /** @type {?} */\n      value);\n\n      return;\n    }\n\n    this._busyPushingNext = true;\n    super.next(value);\n\n    while (this._itemQueue.length > 0) {\n      /** @type {?} */\n      const nextValue = this._itemQueue.pop();\n\n      super.next(nextValue);\n    }\n\n    this._busyPushingNext = false;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  OrderedSubject.prototype._itemQueue;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  OrderedSubject.prototype._busyPushingNext;\n}\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\n\n\nclass InternalActions extends OrderedSubject {}\n\nInternalActions.decorators = [{\n  type: Injectable\n}];\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\n\nclass Actions extends Observable {\n  /**\n   * @param {?} internalActions$\n   * @param {?} internalExecutionStrategy\n   */\n  constructor(internalActions$, internalExecutionStrategy) {\n    super(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => {\n      /** @type {?} */\n      const childSubscription = internalActions$.pipe(leaveNgxs(internalExecutionStrategy)).subscribe({\n        next:\n        /**\n        * @param {?} ctx\n        * @return {?}\n        */\n        ctx => observer.next(ctx),\n        error:\n        /**\n        * @param {?} error\n        * @return {?}\n        */\n        error => observer.error(error),\n        complete:\n        /**\n        * @return {?}\n        */\n        () => observer.complete()\n      });\n      observer.add(childSubscription);\n    });\n  }\n\n}\n\nActions.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nActions.ctorParameters = () => [{\n  type: InternalActions\n}, {\n  type: InternalNgxsExecutionStrategy\n}];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n * @type {?}\n */\n\n\nconst compose =\n/**\n* @param {?} funcs\n* @return {?}\n*/\nfuncs =>\n/**\n* @param {...?} args\n* @return {?}\n*/\n(...args) => {\n  /** @type {?} */\n  const curr =\n  /** @type {?} */\n  funcs.shift();\n  return curr(...args,\n  /**\n  * @param {...?} nextArgs\n  * @return {?}\n  */\n  (...nextArgs) => compose(funcs)(...nextArgs));\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\n\n\nclass StateStream extends BehaviorSubject {\n  constructor() {\n    super({});\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    // The `StateStream` should never emit values once the root view is removed, e.g. when the `NgModuleRef.destroy()` is called.\n    // This will eliminate memory leaks in server-side rendered apps where the `StateStream` is created per each HTTP request, users\n    // might forget to unsubscribe from `store.select` or `store.subscribe`, thus this will lead to huge memory leaks in SSR apps.\n    this.complete();\n  }\n\n}\n\nStateStream.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nStateStream.ctorParameters = () => [];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass PluginManager {\n  /**\n   * @param {?} _parentManager\n   * @param {?} _pluginHandlers\n   */\n  constructor(_parentManager, _pluginHandlers) {\n    this._parentManager = _parentManager;\n    this._pluginHandlers = _pluginHandlers;\n    this.plugins = [];\n    this.registerHandlers();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  get rootPlugins() {\n    return this._parentManager && this._parentManager.plugins || this.plugins;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  registerHandlers() {\n    /** @type {?} */\n    const pluginHandlers = this.getPluginHandlers();\n    this.rootPlugins.push(...pluginHandlers);\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  getPluginHandlers() {\n    /** @type {?} */\n    const handlers = this._pluginHandlers || [];\n    return handlers.map(\n    /**\n    * @param {?} plugin\n    * @return {?}\n    */\n    plugin =>\n    /** @type {?} */\n    plugin.handle ? plugin.handle.bind(plugin) : plugin);\n  }\n\n}\n\nPluginManager.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nPluginManager.ctorParameters = () => [{\n  type: PluginManager,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: Array,\n  decorators: [{\n    type: Inject,\n    args: [NGXS_PLUGINS]\n  }, {\n    type: Optional\n  }]\n}];\n\nif (false) {\n  /** @type {?} */\n  PluginManager.prototype.plugins;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PluginManager.prototype._parentManager;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PluginManager.prototype._pluginHandlers;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\n\n\nclass InternalDispatchedActionResults extends Subject {}\n\nInternalDispatchedActionResults.decorators = [{\n  type: Injectable\n}];\n\nclass InternalDispatcher {\n  /**\n   * @param {?} _injector\n   * @param {?} _actions\n   * @param {?} _actionResults\n   * @param {?} _pluginManager\n   * @param {?} _stateStream\n   * @param {?} _ngxsExecutionStrategy\n   */\n  constructor(_injector, _actions, _actionResults, _pluginManager, _stateStream, _ngxsExecutionStrategy) {\n    this._injector = _injector;\n    this._actions = _actions;\n    this._actionResults = _actionResults;\n    this._pluginManager = _pluginManager;\n    this._stateStream = _stateStream;\n    this._ngxsExecutionStrategy = _ngxsExecutionStrategy;\n  }\n  /**\n   * Dispatches event(s).\n   * @param {?} actionOrActions\n   * @return {?}\n   */\n\n\n  dispatch(actionOrActions) {\n    /** @type {?} */\n    const result = this._ngxsExecutionStrategy.enter(\n    /**\n    * @return {?}\n    */\n    () => this.dispatchByEvents(actionOrActions));\n\n    result.subscribe({\n      error:\n      /**\n      * @param {?} error\n      * @return {?}\n      */\n      error => this._ngxsExecutionStrategy.leave(\n      /**\n      * @return {?}\n      */\n      () => {\n        try {\n          // Retrieve lazily to avoid cyclic dependency exception\n          this._errorHandler = this._errorHandler || this._injector.get(ErrorHandler);\n\n          this._errorHandler.handleError(error);\n        } catch (_a) {}\n      })\n    });\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\n  }\n  /**\n   * @private\n   * @param {?} actionOrActions\n   * @return {?}\n   */\n\n\n  dispatchByEvents(actionOrActions) {\n    if (Array.isArray(actionOrActions)) {\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\n      return forkJoin(actionOrActions.map(\n      /**\n      * @param {?} action\n      * @return {?}\n      */\n      action => this.dispatchSingle(action)));\n    } else {\n      return this.dispatchSingle(actionOrActions);\n    }\n  }\n  /**\n   * @private\n   * @param {?} action\n   * @return {?}\n   */\n\n\n  dispatchSingle(action) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      /** @type {?} */\n      const type = getActionTypeFromInstance(action);\n\n      if (!type) {\n        /** @type {?} */\n        const error = new Error(`This action doesn't have a type property: ${action.constructor.name}`);\n        return throwError(error);\n      }\n    }\n    /** @type {?} */\n\n\n    const prevState = this._stateStream.getValue();\n    /** @type {?} */\n\n\n    const plugins = this._pluginManager.plugins;\n    return (\n      /** @type {?} */\n      compose([...plugins,\n      /**\n      * @param {?} nextState\n      * @param {?} nextAction\n      * @return {?}\n      */\n      (nextState, nextAction) => {\n        if (nextState !== prevState) {\n          this._stateStream.next(nextState);\n        }\n        /** @type {?} */\n\n\n        const actionResult$ = this.getActionResultStream(nextAction);\n        actionResult$.subscribe(\n        /**\n        * @param {?} ctx\n        * @return {?}\n        */\n        ctx => this._actions.next(ctx));\n\n        this._actions.next({\n          action: nextAction,\n          status: \"DISPATCHED\"\n          /* Dispatched */\n\n        });\n\n        return this.createDispatchObservable(actionResult$);\n      }])(prevState, action).pipe(shareReplay())\n    );\n  }\n  /**\n   * @private\n   * @param {?} action\n   * @return {?}\n   */\n\n\n  getActionResultStream(action) {\n    return this._actionResults.pipe(filter(\n    /**\n    * @param {?} ctx\n    * @return {?}\n    */\n    ctx => ctx.action === action && ctx.status !== \"DISPATCHED\"\n    /* Dispatched */\n    ), take(1), shareReplay());\n  }\n  /**\n   * @private\n   * @param {?} actionResult$\n   * @return {?}\n   */\n\n\n  createDispatchObservable(actionResult$) {\n    return actionResult$.pipe(exhaustMap(\n    /**\n    * @param {?} ctx\n    * @return {?}\n    */\n    ctx => {\n      switch (ctx.status) {\n        case \"SUCCESSFUL\"\n        /* Successful */\n        :\n          return of(this._stateStream.getValue());\n\n        case \"ERRORED\"\n        /* Errored */\n        :\n          return throwError(ctx.error);\n\n        default:\n          return EMPTY;\n      }\n    })).pipe(shareReplay());\n  }\n\n}\n\nInternalDispatcher.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nInternalDispatcher.ctorParameters = () => [{\n  type: Injector\n}, {\n  type: InternalActions\n}, {\n  type: InternalDispatchedActionResults\n}, {\n  type: PluginManager\n}, {\n  type: StateStream\n}, {\n  type: InternalNgxsExecutionStrategy\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  InternalDispatcher.prototype._errorHandler;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalDispatcher.prototype._injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalDispatcher.prototype._actions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalDispatcher.prototype._actionResults;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalDispatcher.prototype._pluginManager;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalDispatcher.prototype._stateStream;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalDispatcher.prototype._ngxsExecutionStrategy;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n * @type {?}\n */\n\n\nconst deepFreeze =\n/**\n* @param {?} o\n* @return {?}\n*/\no => {\n  Object.freeze(o);\n  /** @type {?} */\n\n  const oIsFunction = typeof o === 'function';\n  /** @type {?} */\n\n  const hasOwnProp = Object.prototype.hasOwnProperty;\n  Object.getOwnPropertyNames(o).forEach(\n  /**\n  * @param {?} prop\n  * @return {?}\n  */\n  function (prop) {\n    if (hasOwnProp.call(o, prop) && (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) && o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * State Context factory class\n * @ignore\n */\n\n\nclass InternalStateOperations {\n  /**\n   * @param {?} _stateStream\n   * @param {?} _dispatcher\n   * @param {?} _config\n   */\n  constructor(_stateStream, _dispatcher, _config) {\n    this._stateStream = _stateStream;\n    this._dispatcher = _dispatcher;\n    this._config = _config;\n  }\n  /**\n   * Returns the root state operators.\n   * @return {?}\n   */\n\n\n  getRootStateOperations() {\n    /** @type {?} */\n    const rootStateOperations = {\n      getState:\n      /**\n      * @return {?}\n      */\n      () => this._stateStream.getValue(),\n      setState:\n      /**\n      * @param {?} newState\n      * @return {?}\n      */\n      newState => this._stateStream.next(newState),\n      dispatch:\n      /**\n      * @param {?} actionOrActions\n      * @return {?}\n      */\n      actionOrActions => this._dispatcher.dispatch(actionOrActions)\n    };\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      return this._config.developmentMode ? ensureStateAndActionsAreImmutable(rootStateOperations) : rootStateOperations;\n    } else {\n      return rootStateOperations;\n    }\n  }\n  /**\n   * @param {?} results\n   * @return {?}\n   */\n\n\n  setStateToTheCurrentWithNew(results) {\n    /** @type {?} */\n    const stateOperations = this.getRootStateOperations(); // Get our current stream\n\n    /** @type {?} */\n\n    const currentState = stateOperations.getState(); // Set the state to the current + new\n\n    stateOperations.setState(Object.assign({}, currentState, results.defaults));\n  }\n\n}\n\nInternalStateOperations.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nInternalStateOperations.ctorParameters = () => [{\n  type: StateStream\n}, {\n  type: InternalDispatcher\n}, {\n  type: NgxsConfig\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  InternalStateOperations.prototype._stateStream;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalStateOperations.prototype._dispatcher;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  InternalStateOperations.prototype._config;\n}\n/**\n * @param {?} root\n * @return {?}\n */\n\n\nfunction ensureStateAndActionsAreImmutable(root) {\n  return {\n    getState:\n    /**\n    * @return {?}\n    */\n    () => root.getState(),\n    setState:\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    value => {\n      /** @type {?} */\n      const frozenValue = deepFreeze(value);\n      return root.setState(frozenValue);\n    },\n    dispatch:\n    /**\n    * @param {?} actions\n    * @return {?}\n    */\n    actions => {\n      return root.dispatch(actions);\n    }\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n * @param {?} val\n * @return {?}\n */\n\n\nfunction simplePatch(val) {\n  return (\n    /**\n    * @param {?} existingState\n    * @return {?}\n    */\n    existingState => {\n      if (Array.isArray(val)) {\n        throwPatchingArrayError();\n      } else if (typeof val !== 'object') {\n        throwPatchingPrimitiveError();\n      }\n      /** @type {?} */\n\n\n      const newState = Object.assign({},\n      /** @type {?} */\n      existingState);\n\n      for (const key in val) {\n        // deep clone for patch compatibility\n        // noinspection JSUnfilteredForInLoop (IDE)\n        newState[key] =\n        /** @type {?} */\n        val[key];\n      }\n\n      return (\n        /** @type {?} */\n        newState\n      );\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * State Context factory class\n * @ignore\n */\n\n\nclass StateContextFactory {\n  /**\n   * @param {?} _internalStateOperations\n   */\n  constructor(_internalStateOperations) {\n    this._internalStateOperations = _internalStateOperations;\n  }\n  /**\n   * Create the state context\n   * @template T\n   * @param {?} mappedStore\n   * @return {?}\n   */\n\n\n  createStateContext(mappedStore) {\n    /** @type {?} */\n    const root = this._internalStateOperations.getRootStateOperations();\n    /**\n     * @param {?} currentAppState\n     * @return {?}\n     */\n\n\n    function getState(currentAppState) {\n      return getValue(currentAppState, mappedStore.path);\n    }\n    /**\n     * @param {?} currentAppState\n     * @param {?} newValue\n     * @return {?}\n     */\n\n\n    function setStateValue(currentAppState, newValue) {\n      /** @type {?} */\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\n      /** @type {?} */\n\n      const instance = mappedStore.instance;\n\n      if (instance.ngxsOnChanges) {\n        /** @type {?} */\n        const change = getStateDiffChanges(mappedStore, {\n          currentAppState,\n          newAppState\n        });\n        instance.ngxsOnChanges(change);\n      }\n\n      root.setState(newAppState);\n      return newAppState; // In doing this refactoring I noticed that there is a 'bug' where the\n      // application state is returned instead of this state slice.\n      // This has worked this way since the beginning see:\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\n      // This needs to be fixed, but is a 'breaking' change.\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\n    }\n    /**\n     * @param {?} currentAppState\n     * @param {?} stateOperator\n     * @return {?}\n     */\n\n\n    function setStateFromOperator(currentAppState, stateOperator) {\n      /** @type {?} */\n      const local = getState(currentAppState);\n      /** @type {?} */\n\n      const newValue = stateOperator(local);\n      return setStateValue(currentAppState, newValue);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    function isStateOperator(value) {\n      return typeof value === 'function';\n    }\n\n    return {\n      /**\n       * @return {?}\n       */\n      getState() {\n        /** @type {?} */\n        const currentAppState = root.getState();\n        return getState(currentAppState);\n      },\n\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      patchState(val) {\n        /** @type {?} */\n        const currentAppState = root.getState();\n        /** @type {?} */\n\n        const patchOperator = simplePatch(val);\n        return setStateFromOperator(currentAppState, patchOperator);\n      },\n\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      setState(val) {\n        /** @type {?} */\n        const currentAppState = root.getState();\n        return isStateOperator(val) ? setStateFromOperator(currentAppState, val) : setStateValue(currentAppState, val);\n      },\n\n      /**\n       * @param {?} actions\n       * @return {?}\n       */\n      dispatch(actions) {\n        return root.dispatch(actions);\n      }\n\n    };\n  }\n\n}\n\nStateContextFactory.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nStateContextFactory.ctorParameters = () => [{\n  type: InternalStateOperations\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  StateContextFactory.prototype._internalStateOperations;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nclass StoreValidators {\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n  static checkThatStateIsNamedCorrectly(name) {\n    if (!name) {\n      throwStateNamePropertyError();\n    } else if (!this.stateNameRegex.test(name)) {\n      throwStateNameError(name);\n    }\n  }\n  /**\n   * @param {?} stateName\n   * @param {?} state\n   * @param {?} statesByName\n   * @return {?}\n   */\n\n\n  static checkThatStateNameIsUnique(stateName, state, statesByName) {\n    /** @type {?} */\n    const existingState = statesByName[stateName];\n\n    if (existingState && existingState !== state) {\n      throwStateUniqueError(stateName, state.name, existingState.name);\n    }\n  }\n  /**\n   * @param {?} stateClasses\n   * @return {?}\n   */\n\n\n  static checkThatStateClassesHaveBeenDecorated(stateClasses) {\n    stateClasses.forEach(\n    /**\n    * @param {?} stateClass\n    * @return {?}\n    */\n    stateClass => {\n      if (!getStoreMetadata(stateClass)) {\n        throwStateDecoratorError(stateClass.name);\n      }\n    });\n  }\n\n}\n\nStoreValidators.stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  StoreValidators.stateNameRegex;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * All provided or injected tokens must have `\\@Injectable` decorator\n * (previously, injected tokens without `\\@Injectable` were allowed\n * if another decorator was used, e.g. pipes).\n * @param {?} stateClass\n * @return {?}\n */\n\n\nfunction ensureStateClassIsInjectable(stateClass) {\n  // `ɵprov` is a static property added by the NGCC compiler. It always exists in\n  // AOT mode because this property is added before runtime. If an application is running in\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\n  if (ɵivyEnabled) {\n    /** @type {?} */\n\n    /** @nocollapse */\n    const ngInjectableDef = stateClass.ɵprov;\n\n    if (!ngInjectableDef) {\n      // Don't warn if Ivy is disabled or `ɵprov` exists on the class\n      console.warn(getUndecoratedStateInIvyWarningMessage(stateClass.name));\n    }\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * State factory class\n * @ignore\n */\n\n\nclass StateFactory {\n  /**\n   * @param {?} _injector\n   * @param {?} _config\n   * @param {?} _parentFactory\n   * @param {?} _actions\n   * @param {?} _actionResults\n   * @param {?} _stateContextFactory\n   * @param {?} _initialState\n   */\n  constructor(_injector, _config, _parentFactory, _actions, _actionResults, _stateContextFactory, _initialState) {\n    this._injector = _injector;\n    this._config = _config;\n    this._parentFactory = _parentFactory;\n    this._actions = _actions;\n    this._actionResults = _actionResults;\n    this._stateContextFactory = _stateContextFactory;\n    this._initialState = _initialState;\n    this._actionsSubscription = null;\n    this._states = [];\n    this._statesByName = {};\n    this._statePaths = {};\n    this.getRuntimeSelectorContext = memoize(\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      const stateFactory = this;\n      /**\n       * @param {?} key\n       * @return {?}\n       */\n\n      function resolveGetter(key) {\n        /** @type {?} */\n        const path = stateFactory.statePaths[key];\n        return path ? propGetter(path.split('.'), stateFactory._config) : null;\n      }\n      /** @type {?} */\n\n\n      const context = this._parentFactory ? this._parentFactory.getRuntimeSelectorContext() : {\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        getStateGetter(key) {\n          /** @type {?} */\n          let getter = resolveGetter(key);\n\n          if (getter) {\n            return getter;\n          }\n\n          return (\n            /**\n            * @param {...?} args\n            * @return {?}\n            */\n            (...args) => {\n              // Late loaded getter\n              if (!getter) {\n                getter = resolveGetter(key);\n              }\n\n              return getter ? getter(...args) : undefined;\n            }\n          );\n        },\n\n        /**\n         * @param {?=} localOptions\n         * @return {?}\n         */\n        getSelectorOptions(localOptions) {\n          /** @type {?} */\n          const globalSelectorOptions = stateFactory._config.selectorOptions;\n          return Object.assign({}, globalSelectorOptions, localOptions || {});\n        }\n\n      };\n      return context;\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get states() {\n    return this._parentFactory ? this._parentFactory.states : this._states;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get statesByName() {\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  get statePaths() {\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\n  }\n  /**\n   * @private\n   * @param {?} defaults\n   * @return {?}\n   */\n\n\n  static cloneDefaults(defaults) {\n    /** @type {?} */\n    let value = {};\n\n    if (Array.isArray(defaults)) {\n      value = defaults.slice();\n    } else if (isObject$1(defaults)) {\n      value = Object.assign({}, defaults);\n    } else if (defaults === undefined) {\n      value = {};\n    } else {\n      value = defaults;\n    }\n\n    return value;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    // I'm using non-null assertion here since `_actionsSubscrition` will\n    // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\n    // on the `StateFactory` until its initialized :) An it's initialized\n    // for the first time along with the `NgxsRootModule`.\n\n    /** @type {?} */\n    this._actionsSubscription.unsubscribe();\n  }\n  /**\n   * Add a new state to the global defs.\n   * @param {?} stateClasses\n   * @return {?}\n   */\n\n\n  add(stateClasses) {\n    // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      StoreValidators.checkThatStateClassesHaveBeenDecorated(stateClasses);\n    }\n\n    const {\n      newStates\n    } = this.addToStatesMap(stateClasses);\n    if (!newStates.length) return [];\n    /** @type {?} */\n\n    const stateGraph = buildGraph(newStates);\n    /** @type {?} */\n\n    const sortedStates = topologicalSort(stateGraph);\n    /** @type {?} */\n\n    const paths = findFullParentPath(stateGraph);\n    /** @type {?} */\n\n    const nameGraph = nameToState(newStates);\n    /** @type {?} */\n\n    const bootstrappedStores = [];\n\n    for (const name of sortedStates) {\n      /** @type {?} */\n      const stateClass = nameGraph[name];\n      /** @type {?} */\n\n      const path = paths[name];\n      /** @type {?} */\n\n      const meta =\n      /** @type {?} */\n      stateClass[META_KEY];\n      this.addRuntimeInfoToMeta(meta, path); // Note: previously we called `ensureStateClassIsInjectable` within the\n      // `State` decorator. This check is moved here because the `ɵprov` property\n      // will not exist on the class in JIT mode (because it's set asynchronously\n      // during JIT compilation through `Object.defineProperty`).\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        ensureStateClassIsInjectable(stateClass);\n      }\n      /** @type {?} */\n\n\n      const stateMap = {\n        name,\n        path,\n        isInitialised: false,\n        actions: meta.actions,\n        instance: this._injector.get(stateClass),\n        defaults: StateFactory.cloneDefaults(meta.defaults)\n      }; // ensure our store hasn't already been added\n      // but don't throw since it could be lazy\n      // loaded from different paths\n\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\n        bootstrappedStores.push(stateMap);\n      }\n\n      this.states.push(stateMap);\n    }\n\n    return bootstrappedStores;\n  }\n  /**\n   * Add a set of states to the store and return the defaults\n   * @param {?} stateClasses\n   * @return {?}\n   */\n\n\n  addAndReturnDefaults(stateClasses) {\n    /** @type {?} */\n    const classes = stateClasses || [];\n    /** @type {?} */\n\n    const mappedStores = this.add(classes);\n    /** @type {?} */\n\n    const defaults = mappedStores.reduce(\n    /**\n    * @param {?} result\n    * @param {?} mappedStore\n    * @return {?}\n    */\n    (result, mappedStore) => setValue(result, mappedStore.path, mappedStore.defaults), {});\n    return {\n      defaults,\n      states: mappedStores\n    };\n  }\n  /**\n   * Bind the actions to the handlers\n   * @return {?}\n   */\n\n\n  connectActionHandlers() {\n    if (this._actionsSubscription !== null) return;\n    /** @type {?} */\n\n    const dispatched$ = new Subject();\n    this._actionsSubscription = this._actions.pipe(filter(\n    /**\n    * @param {?} ctx\n    * @return {?}\n    */\n    ctx => ctx.status === \"DISPATCHED\"\n    /* Dispatched */\n    ), mergeMap(\n    /**\n    * @param {?} ctx\n    * @return {?}\n    */\n    ctx => {\n      dispatched$.next(ctx);\n      /** @type {?} */\n\n      const action = ctx.action;\n      return this.invokeActions(dispatched$,\n      /** @type {?} */\n      action).pipe(map(\n      /**\n      * @return {?}\n      */\n      () => (\n      /** @type {?} */\n      {\n        action,\n        status: \"SUCCESSFUL\"\n        /* Successful */\n\n      })), defaultIfEmpty(\n      /** @type {?} */\n      {\n        action,\n        status: \"CANCELED\"\n        /* Canceled */\n\n      }), catchError(\n      /**\n      * @param {?} error\n      * @return {?}\n      */\n      error => of(\n      /** @type {?} */\n      {\n        action,\n        status: \"ERRORED\"\n        /* Errored */\n        ,\n        error\n      })));\n    })).subscribe(\n    /**\n    * @param {?} ctx\n    * @return {?}\n    */\n    ctx => this._actionResults.next(ctx));\n  }\n  /**\n   * Invoke actions on the states.\n   * @param {?} dispatched$\n   * @param {?} action\n   * @return {?}\n   */\n\n\n  invokeActions(dispatched$, action) {\n    /** @type {?} */\n    const type =\n    /** @type {?} */\n    getActionTypeFromInstance(action);\n    /** @type {?} */\n\n    const results = [];\n\n    for (const metadata of this.states) {\n      /** @type {?} */\n      const actionMetas = metadata.actions[type];\n\n      if (actionMetas) {\n        for (const actionMeta of actionMetas) {\n          /** @type {?} */\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\n\n          try {\n            /** @type {?} */\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\n\n            if (result instanceof Promise) {\n              result = from(result);\n            }\n\n            if (result instanceof Observable) {\n              // If this observable has been completed w/o emitting\n              // any value then we wouldn't want to complete the whole chain\n              // of actions. Since if any observable completes then\n              // action will be canceled.\n              // For instance if any action handler would've had such statement:\n              // `handler(ctx) { return EMPTY; }`\n              // then the action will be canceled.\n              // See https://github.com/ngxs/store/issues/1568\n              result = result.pipe(mergeMap(\n              /**\n              * @param {?} value\n              * @return {?}\n              */\n              value => {\n                if (value instanceof Promise) {\n                  return from(value);\n                }\n\n                if (value instanceof Observable) {\n                  return value;\n                }\n\n                return of(value);\n              }), defaultIfEmpty({}));\n\n              if (actionMeta.options.cancelUncompleted) {\n                // todo: ofActionDispatched should be used with action class\n                result = result.pipe(takeUntil(dispatched$.pipe(ofActionDispatched(\n                /** @type {?} */\n                action))));\n              }\n            } else {\n              result = of({}).pipe(shareReplay());\n            }\n\n            results.push(result);\n          } catch (e) {\n            results.push(throwError(e));\n          }\n        }\n      }\n    }\n\n    if (!results.length) {\n      results.push(of({}));\n    }\n\n    return forkJoin(results);\n  }\n  /**\n   * @private\n   * @param {?} stateClasses\n   * @return {?}\n   */\n\n\n  addToStatesMap(stateClasses) {\n    /** @type {?} */\n    const newStates = [];\n    /** @type {?} */\n\n    const statesMap = this.statesByName;\n\n    for (const stateClass of stateClasses) {\n      /** @type {?} */\n      const stateName =\n      /** @type {?} */\n      getStoreMetadata(stateClass).name; // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        StoreValidators.checkThatStateNameIsUnique(stateName, stateClass, statesMap);\n      }\n      /** @type {?} */\n\n\n      const unmountedState = !statesMap[stateName];\n\n      if (unmountedState) {\n        newStates.push(stateClass);\n        statesMap[stateName] = stateClass;\n      }\n    }\n\n    return {\n      newStates\n    };\n  }\n  /**\n   * @private\n   * @param {?} meta\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  addRuntimeInfoToMeta(meta, path) {\n    this.statePaths[\n    /** @type {?} */\n    meta.name] = path; // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\n    // We will need to come up with an alternative in v4 because this is used by many plugins\n\n    meta.path = path;\n  }\n  /**\n   * \\@description\n   * the method checks if the state has already been added to the tree\n   * and completed the life cycle\n   * @private\n   * @param {?} name\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  hasBeenMountedAndBootstrapped(name, path) {\n    /** @type {?} */\n    const valueIsBootstrappedInInitialState = getValue(this._initialState, path) !== undefined;\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\n  }\n\n}\n\nStateFactory.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nStateFactory.ctorParameters = () => [{\n  type: Injector\n}, {\n  type: NgxsConfig\n}, {\n  type: StateFactory,\n  decorators: [{\n    type: Optional\n  }, {\n    type: SkipSelf\n  }]\n}, {\n  type: InternalActions\n}, {\n  type: InternalDispatchedActionResults\n}, {\n  type: StateContextFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [INITIAL_STATE_TOKEN]\n  }]\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  StateFactory.prototype._actionsSubscription;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._states;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._statesByName;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._statePaths;\n  /** @type {?} */\n\n  StateFactory.prototype.getRuntimeSelectorContext;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._injector;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._parentFactory;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._actions;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._actionResults;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._stateContextFactory;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  StateFactory.prototype._initialState;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass LifecycleStateManager {\n  /**\n   * @param {?} internalStateOperations\n   * @param {?} stateContextFactory\n   * @param {?} bootstrapper\n   */\n  constructor(internalStateOperations, stateContextFactory, bootstrapper) {\n    this.internalStateOperations = internalStateOperations;\n    this.stateContextFactory = stateContextFactory;\n    this.bootstrapper = bootstrapper;\n  }\n  /**\n   * @template T\n   * @param {?} action\n   * @param {?} results\n   * @return {?}\n   */\n\n\n  ngxsBootstrap(action, results) {\n    this.internalStateOperations.getRootStateOperations().dispatch(action).pipe(filter(\n    /**\n    * @return {?}\n    */\n    () => !!results), tap(\n    /**\n    * @return {?}\n    */\n    () => this.invokeInit(\n    /** @type {?} */\n    results.states)), mergeMap(\n    /**\n    * @return {?}\n    */\n    () => this.bootstrapper.appBootstrapped$), filter(\n    /**\n    * @param {?} appBootstrapped\n    * @return {?}\n    */\n    appBootstrapped => !!appBootstrapped)).subscribe(\n    /**\n    * @return {?}\n    */\n    () => this.invokeBootstrap(\n    /** @type {?} */\n    results.states));\n  }\n  /**\n   * Invoke the init function on the states.\n   * @param {?} mappedStores\n   * @return {?}\n   */\n\n\n  invokeInit(mappedStores) {\n    for (const mappedStore of mappedStores) {\n      /** @type {?} */\n      const instance = mappedStore.instance;\n\n      if (instance.ngxsOnChanges) {\n        /** @type {?} */\n        const currentAppState = {};\n        /** @type {?} */\n\n        const newAppState = this.internalStateOperations.getRootStateOperations().getState();\n        /** @type {?} */\n\n        const firstDiffChange = getStateDiffChanges(mappedStore, {\n          currentAppState,\n          newAppState\n        });\n        instance.ngxsOnChanges(firstDiffChange);\n      }\n\n      if (instance.ngxsOnInit) {\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\n      }\n\n      mappedStore.isInitialised = true;\n    }\n  }\n  /**\n   * Invoke the bootstrap function on the states.\n   * @param {?} mappedStores\n   * @return {?}\n   */\n\n\n  invokeBootstrap(mappedStores) {\n    for (const mappedStore of mappedStores) {\n      /** @type {?} */\n      const instance = mappedStore.instance;\n\n      if (instance.ngxsAfterBootstrap) {\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {?} mappedStore\n   * @return {?}\n   */\n\n\n  getStateContext(mappedStore) {\n    return this.stateContextFactory.createStateContext(mappedStore);\n  }\n\n}\n\nLifecycleStateManager.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nLifecycleStateManager.ctorParameters = () => [{\n  type: InternalStateOperations\n}, {\n  type: StateContextFactory\n}, {\n  type: NgxsBootstrapper\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  LifecycleStateManager.prototype.internalStateOperations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  LifecycleStateManager.prototype.stateContextFactory;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  LifecycleStateManager.prototype.bootstrapper;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\n/** @type {?} */\n\nconst selectorOptionsMetaAccessor = {\n  getOptions:\n  /**\n  * @param {?} target\n  * @return {?}\n  */\n  target => {\n    return target &&\n    /** @type {?} */\n    target[SELECTOR_OPTIONS_META_KEY] || {};\n  },\n  defineOptions:\n  /**\n  * @param {?} target\n  * @param {?} options\n  * @return {?}\n  */\n  (target, options) => {\n    if (!target) return;\n\n    /** @type {?} */\n    target[SELECTOR_OPTIONS_META_KEY] = options;\n  }\n};\n/**\n * @record\n */\n\nfunction CreationMetadata() {}\n\nif (false) {\n  /** @type {?} */\n  CreationMetadata.prototype.containerClass;\n  /** @type {?} */\n\n  CreationMetadata.prototype.selectorName;\n  /** @type {?|undefined} */\n\n  CreationMetadata.prototype.getSelectorOptions;\n}\n/**\n * @record\n */\n\n\nfunction RuntimeSelectorInfo() {}\n\nif (false) {\n  /** @type {?} */\n  RuntimeSelectorInfo.prototype.selectorOptions;\n  /** @type {?} */\n\n  RuntimeSelectorInfo.prototype.argumentSelectorFunctions;\n}\n/**\n * Function for creating a selector\n * @template T\n * @param {?} selectors The selectors to use to create the arguments of this function\n * @param {?} originalFn The original function being made into a selector\n * @param {?=} creationMetadata\n * @return {?}\n */\n\n\nfunction createSelector(selectors, originalFn, creationMetadata) {\n  /** @type {?} */\n  const containerClass = creationMetadata && creationMetadata.containerClass;\n  /** @type {?} */\n\n  const wrappedFn =\n  /** @type {?} */\n\n  /**\n  * @param {...?} args\n  * @return {?}\n  */\n  function wrappedSelectorFn(...args) {\n    /** @type {?} */\n    const returnValue = originalFn.apply(containerClass, args);\n\n    if (returnValue instanceof Function) {\n      /** @type {?} */\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\n      return innerMemoizedFn;\n    }\n\n    return returnValue;\n  };\n  /** @type {?} */\n\n\n  const memoizedFn = memoize(wrappedFn);\n  Object.setPrototypeOf(memoizedFn, originalFn);\n  /** @type {?} */\n\n  const selectorMetaData = setupSelectorMetadata(originalFn, creationMetadata);\n  /** @type {?} */\n\n  const makeRootSelector =\n  /**\n  * @param {?} context\n  * @return {?}\n  */\n  context => {\n    const {\n      argumentSelectorFunctions,\n      selectorOptions\n    } = getRuntimeSelectorInfo(context, selectorMetaData, selectors);\n    return (\n      /**\n      * @param {?} rootState\n      * @return {?}\n      */\n      function selectFromRoot(rootState) {\n        // Determine arguments from the app state using the selectors\n\n        /** @type {?} */\n        const results = argumentSelectorFunctions.map(\n        /**\n        * @param {?} argFn\n        * @return {?}\n        */\n        argFn => argFn(rootState)); // if the lambda tries to access a something on the\n        // state that doesn't exist, it will throw a TypeError.\n        // since this is quite usual behaviour, we simply return undefined if so.\n\n        try {\n          return memoizedFn(...results);\n        } catch (ex) {\n          if (ex instanceof TypeError && selectorOptions.suppressErrors) {\n            return undefined;\n          }\n\n          throw ex;\n        }\n      }\n    );\n  };\n\n  selectorMetaData.makeRootSelector = makeRootSelector;\n  return memoizedFn;\n}\n/**\n * @template T\n * @param {?} originalFn\n * @param {?} creationMetadata\n * @return {?}\n */\n\n\nfunction setupSelectorMetadata(originalFn, creationMetadata) {\n  /** @type {?} */\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\n  selectorMetaData.originalFn = originalFn;\n  /** @type {?} */\n\n  let getExplicitSelectorOptions =\n  /**\n  * @return {?}\n  */\n  () => ({});\n\n  if (creationMetadata) {\n    selectorMetaData.containerClass = creationMetadata.containerClass;\n    selectorMetaData.selectorName = creationMetadata.selectorName;\n    getExplicitSelectorOptions = creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\n  }\n  /** @type {?} */\n\n\n  const selectorMetaDataClone = Object.assign({}, selectorMetaData);\n\n  selectorMetaData.getSelectorOptions =\n  /**\n  * @return {?}\n  */\n  () => getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\n\n  return selectorMetaData;\n}\n/**\n * @param {?} context\n * @param {?} selectorMetaData\n * @param {?=} selectors\n * @return {?}\n */\n\n\nfunction getRuntimeSelectorInfo(context, selectorMetaData, selectors = []) {\n  /** @type {?} */\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\n  /** @type {?} */\n\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\n  /** @type {?} */\n\n  const selectorsToApply = getSelectorsToApply(selectors, selectorOptions, selectorMetaData.containerClass);\n  /** @type {?} */\n\n  const argumentSelectorFunctions = selectorsToApply.map(\n  /**\n  * @param {?} selector\n  * @return {?}\n  */\n  selector => {\n    /** @type {?} */\n    const factory = getRootSelectorFactory(selector);\n    return factory(context);\n  });\n  return {\n    selectorOptions,\n    argumentSelectorFunctions\n  };\n}\n/**\n * @param {?} selectorMetaData\n * @param {?} explicitOptions\n * @return {?}\n */\n\n\nfunction getLocalSelectorOptions(selectorMetaData, explicitOptions) {\n  return Object.assign({}, selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}, selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}, selectorMetaData.getSelectorOptions() || {}, explicitOptions);\n}\n/**\n * @param {?=} selectors\n * @param {?=} selectorOptions\n * @param {?=} containerClass\n * @return {?}\n */\n\n\nfunction getSelectorsToApply(selectors = [], selectorOptions, containerClass) {\n  /** @type {?} */\n  const selectorsToApply = [];\n  /** @type {?} */\n\n  const canInjectContainerState = selectors.length === 0 || selectorOptions.injectContainerState;\n\n  if (containerClass && canInjectContainerState) {\n    // If we are on a state class, add it as the first selector parameter\n\n    /** @type {?} */\n    const metadata = getStoreMetadata(containerClass);\n\n    if (metadata) {\n      selectorsToApply.push(containerClass);\n    }\n  }\n\n  if (selectors) {\n    selectorsToApply.push(...selectors);\n  }\n\n  return selectorsToApply;\n}\n/**\n * This function gets the factory function to create the selector to get the selected slice from the app state\n * @ignore\n * @param {?} selector\n * @return {?}\n */\n\n\nfunction getRootSelectorFactory(selector) {\n  /** @type {?} */\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\n  return metadata && metadata.makeRootSelector || (\n  /**\n  * @return {?}\n  */\n  () => selector);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass Store {\n  /**\n   * @param {?} _stateStream\n   * @param {?} _internalStateOperations\n   * @param {?} _config\n   * @param {?} _internalExecutionStrategy\n   * @param {?} _stateFactory\n   * @param {?} initialStateValue\n   */\n  constructor(_stateStream, _internalStateOperations, _config, _internalExecutionStrategy, _stateFactory, initialStateValue) {\n    this._stateStream = _stateStream;\n    this._internalStateOperations = _internalStateOperations;\n    this._config = _config;\n    this._internalExecutionStrategy = _internalExecutionStrategy;\n    this._stateFactory = _stateFactory;\n    /**\n     * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\n     * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\n     * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\n     */\n\n    this._selectableStateStream = this._stateStream.pipe(observeOn(queueScheduler), leaveNgxs(this._internalExecutionStrategy), shareReplay({\n      bufferSize: 1,\n      refCount: true\n    }));\n    this.initStateStream(initialStateValue);\n  }\n  /**\n   * Dispatches event(s).\n   * @param {?} actionOrActions\n   * @return {?}\n   */\n\n\n  dispatch(actionOrActions) {\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\n  }\n  /**\n   * @param {?} selector\n   * @return {?}\n   */\n\n\n  select(selector) {\n    /** @type {?} */\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return this._selectableStateStream.pipe(map(selectorFn), catchError(\n    /**\n    * @param {?} err\n    * @return {?}\n    */\n    err => {\n      // if error is TypeError we swallow it to prevent usual errors with property access\n      const {\n        suppressErrors\n      } = this._config.selectorOptions;\n\n      if (err instanceof TypeError && suppressErrors) {\n        return of(undefined);\n      } // rethrow other errors\n\n\n      return throwError(err);\n    }), distinctUntilChanged(), leaveNgxs(this._internalExecutionStrategy));\n  }\n  /**\n   * @param {?} selector\n   * @return {?}\n   */\n\n\n  selectOnce(selector) {\n    return this.select(selector).pipe(take(1));\n  }\n  /**\n   * @param {?} selector\n   * @return {?}\n   */\n\n\n  selectSnapshot(selector) {\n    /** @type {?} */\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\n    return selectorFn(this._stateStream.getValue());\n  }\n  /**\n   * Allow the user to subscribe to the root of the state\n   * @param {?=} fn\n   * @return {?}\n   */\n\n\n  subscribe(fn) {\n    return this._selectableStateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\n  }\n  /**\n   * Return the raw value of the state.\n   * @return {?}\n   */\n\n\n  snapshot() {\n    return this._internalStateOperations.getRootStateOperations().getState();\n  }\n  /**\n   * Reset the state to a specific point in time. This method is useful\n   * for plugin's who need to modify the state directly or unit testing.\n   * @param {?} state\n   * @return {?}\n   */\n\n\n  reset(state) {\n    return this._internalStateOperations.getRootStateOperations().setState(state);\n  }\n  /**\n   * @private\n   * @param {?} selector\n   * @return {?}\n   */\n\n\n  getStoreBoundSelectorFn(selector) {\n    /** @type {?} */\n    const makeSelectorFn = getRootSelectorFactory(selector);\n    /** @type {?} */\n\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\n\n    return makeSelectorFn(runtimeContext);\n  }\n  /**\n   * @private\n   * @param {?} initialStateValue\n   * @return {?}\n   */\n\n\n  initStateStream(initialStateValue) {\n    /** @type {?} */\n    const value = this._stateStream.value;\n    /** @type {?} */\n\n    const storeIsEmpty = !value || Object.keys(value).length === 0;\n\n    if (storeIsEmpty) {\n      /** @type {?} */\n      const defaultStateNotEmpty = Object.keys(this._config.defaultsState).length > 0;\n      /** @type {?} */\n\n      const storeValues = defaultStateNotEmpty ? Object.assign({}, this._config.defaultsState, initialStateValue) : initialStateValue;\n\n      this._stateStream.next(storeValues);\n    }\n  }\n\n}\n\nStore.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nStore.ctorParameters = () => [{\n  type: StateStream\n}, {\n  type: InternalStateOperations\n}, {\n  type: NgxsConfig\n}, {\n  type: InternalNgxsExecutionStrategy\n}, {\n  type: StateFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [INITIAL_STATE_TOKEN]\n  }]\n}];\n\nif (false) {\n  /**\n   * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\n   * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\n   * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\n   * @type {?}\n   * @private\n   */\n  Store.prototype._selectableStateStream;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Store.prototype._stateStream;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Store.prototype._internalStateOperations;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Store.prototype._config;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Store.prototype._internalExecutionStrategy;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  Store.prototype._stateFactory;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Allows the select decorator to get access to the DI store, this is used internally\n * in `\\@Select` decorator.\n */\n\n\nclass SelectFactory {\n  /**\n   * @param {?} store\n   * @param {?} config\n   */\n  constructor(store, config) {\n    SelectFactory.store = store;\n    SelectFactory.config = config;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    SelectFactory.store = null;\n    SelectFactory.config = null;\n  }\n\n}\n\nSelectFactory.store = null;\nSelectFactory.config = null;\nSelectFactory.decorators = [{\n  type: Injectable\n}];\n/** @nocollapse */\n\nSelectFactory.ctorParameters = () => [{\n  type: Store\n}, {\n  type: NgxsConfig\n}];\n\nif (false) {\n  /** @type {?} */\n  SelectFactory.store;\n  /** @type {?} */\n\n  SelectFactory.config;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Init action\n */\n\n\nclass InitState {\n  /**\n   * @return {?}\n   */\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '@@INIT';\n  }\n\n}\n/**\n * Update action\n */\n\n\nclass UpdateState {\n  /**\n   * @param {?=} addedStates\n   */\n  constructor(addedStates) {\n    this.addedStates = addedStates;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  static get type() {\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n    return '@@UPDATE_STATE';\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  UpdateState.prototype.addedStates;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Root module\n * @ignore\n */\n\n\nclass NgxsRootModule {\n  /**\n   * @param {?} factory\n   * @param {?} internalStateOperations\n   * @param {?} _store\n   * @param {?} _select\n   * @param {?=} states\n   * @param {?=} lifecycleStateManager\n   */\n  constructor(factory, internalStateOperations, _store, _select, states = [], lifecycleStateManager) {\n    // Add stores to the state graph and return their defaults\n\n    /** @type {?} */\n    const results = factory.addAndReturnDefaults(states);\n    internalStateOperations.setStateToTheCurrentWithNew(results); // Connect our actions stream\n\n    factory.connectActionHandlers(); // Dispatch the init action and invoke init and bootstrap functions after\n\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\n  }\n\n}\n\nNgxsRootModule.decorators = [{\n  type: NgModule\n}];\n/** @nocollapse */\n\nNgxsRootModule.ctorParameters = () => [{\n  type: StateFactory\n}, {\n  type: InternalStateOperations\n}, {\n  type: Store\n}, {\n  type: SelectFactory\n}, {\n  type: Array,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [ROOT_STATE_TOKEN]\n  }]\n}, {\n  type: LifecycleStateManager\n}];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Feature module\n * @ignore\n */\n\n\nclass NgxsFeatureModule {\n  /**\n   * @param {?} _store\n   * @param {?} internalStateOperations\n   * @param {?} factory\n   * @param {?=} states\n   * @param {?=} lifecycleStateManager\n   */\n  constructor(_store, internalStateOperations, factory, states = [], lifecycleStateManager) {\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\n\n    /** @type {?} */\n    const flattenedStates = NgxsFeatureModule.flattenStates(states); // add stores to the state graph and return their defaults\n\n    /** @type {?} */\n\n    const results = factory.addAndReturnDefaults(flattenedStates);\n\n    if (results.states.length) {\n      internalStateOperations.setStateToTheCurrentWithNew(results); // dispatch the update action and invoke init and bootstrap functions after\n\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\n    }\n  }\n  /**\n   * @private\n   * @param {?=} states\n   * @return {?}\n   */\n\n\n  static flattenStates(states = []) {\n    return states.reduce(\n    /**\n    * @param {?} total\n    * @param {?} values\n    * @return {?}\n    */\n    (total, values) => total.concat(values), []);\n  }\n\n}\n\nNgxsFeatureModule.decorators = [{\n  type: NgModule\n}];\n/** @nocollapse */\n\nNgxsFeatureModule.ctorParameters = () => [{\n  type: Store\n}, {\n  type: InternalStateOperations\n}, {\n  type: StateFactory\n}, {\n  type: Array,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [FEATURE_STATE_TOKEN]\n  }]\n}, {\n  type: LifecycleStateManager\n}];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Ngxs Module\n */\n\n\nclass NgxsModule {\n  /**\n   * Root module factory\n   * @param {?=} states\n   * @param {?=} options\n   * @return {?}\n   */\n  static forRoot(states = [], options = {}) {\n    return {\n      ngModule: NgxsRootModule,\n      providers: [StateFactory, StateContextFactory, Actions, InternalActions, NgxsBootstrapper, LifecycleStateManager, InternalDispatcher, InternalDispatchedActionResults, InternalStateOperations, InternalNgxsExecutionStrategy, Store, StateStream, SelectFactory, PluginManager, ...states, ...NgxsModule.ngxsTokenProviders(states, options)]\n    };\n  }\n  /**\n   * Feature module factory\n   * @param {?=} states\n   * @return {?}\n   */\n\n\n  static forFeature(states = []) {\n    return {\n      ngModule: NgxsFeatureModule,\n      providers: [StateFactory, PluginManager, ...states, {\n        provide: FEATURE_STATE_TOKEN,\n        multi: true,\n        useValue: states\n      }]\n    };\n  }\n  /**\n   * @private\n   * @param {?} states\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  static ngxsTokenProviders(states, options) {\n    return [{\n      provide: USER_PROVIDED_NGXS_EXECUTION_STRATEGY,\n      useValue: options.executionStrategy\n    }, {\n      provide: ROOT_STATE_TOKEN,\n      useValue: states\n    }, {\n      provide: NgxsModule.ROOT_OPTIONS,\n      useValue: options\n    }, {\n      provide: NgxsConfig,\n      useFactory: NgxsModule.ngxsConfigFactory,\n      deps: [NgxsModule.ROOT_OPTIONS]\n    }, {\n      provide: APP_BOOTSTRAP_LISTENER,\n      useFactory: NgxsModule.appBootstrapListenerFactory,\n      multi: true,\n      deps: [NgxsBootstrapper]\n    }, {\n      provide: INITIAL_STATE_TOKEN,\n      useFactory: NgxsModule.getInitialState\n    }, {\n      provide: NGXS_STATE_CONTEXT_FACTORY,\n      useExisting: StateContextFactory\n    }, {\n      provide: NGXS_STATE_FACTORY,\n      useExisting: StateFactory\n    }];\n  }\n  /**\n   * @private\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  static ngxsConfigFactory(options) {\n    return mergeDeep(new NgxsConfig(), options);\n  }\n  /**\n   * @private\n   * @param {?} bootstrapper\n   * @return {?}\n   */\n\n\n  static appBootstrapListenerFactory(bootstrapper) {\n    return (\n      /**\n      * @return {?}\n      */\n      () => bootstrapper.bootstrap()\n    );\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  static getInitialState() {\n    return InitialState.pop();\n  }\n\n}\n\nNgxsModule.ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\nNgxsModule.decorators = [{\n  type: NgModule\n}];\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NgxsModule.ROOT_OPTIONS;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Decorates a method with a action information.\n * @param {?} actions\n * @param {?=} options\n * @return {?}\n */\n\n\nfunction Action(actions, options) {\n  return (\n    /**\n    * @param {?} target\n    * @param {?} name\n    * @return {?}\n    */\n    (target, name) => {\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        /** @type {?} */\n        const isStaticMethod = target.hasOwnProperty('prototype');\n\n        if (isStaticMethod) {\n          throwActionDecoratorError();\n        }\n      }\n      /** @type {?} */\n\n\n      const meta = ensureStoreMetadata(target.constructor);\n\n      if (!Array.isArray(actions)) {\n        actions = [actions];\n      }\n\n      for (const action of actions) {\n        /** @type {?} */\n        const type = action.type;\n\n        if (!meta.actions[type]) {\n          meta.actions[type] = [];\n        }\n\n        meta.actions[type].push({\n          fn: name,\n          options: options || {},\n          type\n        });\n      }\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n * @template T\n */\n\n\nfunction MutateMetaOptions() {}\n\nif (false) {\n  /** @type {?} */\n  MutateMetaOptions.prototype.meta;\n  /** @type {?} */\n\n  MutateMetaOptions.prototype.inheritedStateClass;\n  /** @type {?} */\n\n  MutateMetaOptions.prototype.optionsWithInheritance;\n}\n/**\n * Decorates a class with ngxs state information.\n * @template T\n * @param {?} options\n * @return {?}\n */\n\n\nfunction State(options) {\n  /**\n   * @param {?} inheritedStateClass\n   * @return {?}\n   */\n  function getStateOptions(inheritedStateClass) {\n    /** @type {?} */\n    const inheritanceOptions = inheritedStateClass[META_OPTIONS_KEY] || {};\n    return (\n      /** @type {?} */\n      Object.assign({}, inheritanceOptions, options)\n    );\n  }\n  /**\n   * @param {?} params\n   * @return {?}\n   */\n\n\n  function mutateMetaData(params) {\n    const {\n      meta,\n      inheritedStateClass,\n      optionsWithInheritance\n    } = params;\n    const {\n      children,\n      defaults,\n      name\n    } = optionsWithInheritance;\n    /** @type {?} */\n\n    const stateName = typeof name === 'string' ? name : name && name.getName() || null; // Caretaker note: we have still left the `typeof` condition in order to avoid\n    // creating a breaking change for projects that still use the View Engine.\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      StoreValidators.checkThatStateIsNamedCorrectly(stateName);\n    }\n\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\n      /** @type {?} */\n      const inheritedMeta = inheritedStateClass[META_KEY] || {};\n      meta.actions = Object.assign({}, meta.actions, inheritedMeta.actions);\n    }\n\n    meta.children = children;\n    meta.defaults = defaults;\n    meta.name = stateName;\n  }\n\n  return (\n    /**\n    * @param {?} target\n    * @return {?}\n    */\n    target => {\n      /** @type {?} */\n      const stateClass = target;\n      /** @type {?} */\n\n      const meta = ensureStoreMetadata(stateClass);\n      /** @type {?} */\n\n      const inheritedStateClass = Object.getPrototypeOf(stateClass);\n      /** @type {?} */\n\n      const optionsWithInheritance = getStateOptions(inheritedStateClass);\n      mutateMetaData({\n        meta,\n        inheritedStateClass,\n        optionsWithInheritance\n      });\n      stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst DOLLAR_CHAR_CODE = 36;\n/**\n * @template T\n * @param {?} selector\n * @return {?}\n */\n\nfunction createSelectObservable(selector) {\n  if (!SelectFactory.store) {\n    throwSelectFactoryNotConnectedError();\n  }\n\n  return (\n    /** @type {?} */\n    SelectFactory.store.select(selector)\n  );\n}\n/**\n * @param {?} name\n * @param {?=} rawSelector\n * @param {?=} paths\n * @return {?}\n */\n\n\nfunction createSelectorFn(name, rawSelector, paths = []) {\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\n\n  if (typeof rawSelector === 'string') {\n    /** @type {?} */\n    const propsArray = paths.length ? [rawSelector, ...paths] : rawSelector.split('.');\n    return propGetter(propsArray,\n    /** @type {?} */\n    SelectFactory.config);\n  }\n\n  return rawSelector;\n}\n/**\n * \\@example If `foo$` => make it just `foo`\n * @param {?} name\n * @return {?}\n */\n\n\nfunction removeDollarAtTheEnd(name) {\n  /** @type {?} */\n  const lastCharIndex = name.length - 1;\n  /** @type {?} */\n\n  const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Decorator for selecting a slice of state from the store.\n * @template T\n * @param {?=} rawSelector\n * @param {...?} paths\n * @return {?}\n */\n\n\nfunction Select(rawSelector, ...paths) {\n  return (\n    /**\n    * @param {?} target\n    * @param {?} key\n    * @return {?}\n    */\n    function (target, key) {\n      /** @type {?} */\n      const name = key.toString();\n      /** @type {?} */\n\n      const selectorId = `__${name}__selector`;\n      /** @type {?} */\n\n      const selector = createSelectorFn(name, rawSelector, paths);\n      Object.defineProperties(target, {\n        [selectorId]: {\n          writable: true,\n          enumerable: false,\n          configurable: true\n        },\n        [name]: {\n          enumerable: true,\n          configurable: true,\n\n          /**\n           * @return {?}\n           */\n          get() {\n            return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\n          }\n\n        }\n      });\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Decorator for setting selector options at a method or class level.\n * @param {?} options\n * @return {?}\n */\n\n\nfunction SelectorOptions(options) {\n  return (\n    /** @type {?} */\n\n    /**\n    * @template T\n    * @param {?} target\n    * @param {?} methodName\n    * @param {?} descriptor\n    * @return {?}\n    */\n    function decorate(target, methodName, descriptor) {\n      if (methodName) {\n        // Method Decorator\n\n        /** @type {?} */\n        const originalFn = descriptor.value ||\n        /** @type {?} */\n        descriptor.originalFn;\n\n        if (originalFn) {\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\n        }\n      } else {\n        // Class Decorator\n        selectorOptionsMetaAccessor.defineOptions(target, options);\n      }\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction MetaDataModel$1() {}\n\nif (false) {\n  /** @type {?} */\n  MetaDataModel$1.prototype.name;\n  /** @type {?} */\n\n  MetaDataModel$1.prototype.actions;\n  /** @type {?} */\n\n  MetaDataModel$1.prototype.defaults;\n  /** @type {?} */\n\n  MetaDataModel$1.prototype.path;\n  /** @type {?|undefined} */\n\n  MetaDataModel$1.prototype.children;\n}\n/**\n * @record\n */\n\n\nfunction SelectorMetaDataModel$1() {}\n\nif (false) {\n  /** @type {?} */\n  SelectorMetaDataModel$1.prototype.originalFn;\n  /** @type {?} */\n\n  SelectorMetaDataModel$1.prototype.containerClass;\n  /** @type {?} */\n\n  SelectorMetaDataModel$1.prototype.selectorName;\n  /** @type {?} */\n\n  SelectorMetaDataModel$1.prototype.getSelectorOptions;\n}\n/**\n * @param {?} target\n * @return {?}\n */\n\n\nfunction ensureStoreMetadata$1(target) {\n  return ensureStoreMetadata(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\n\n\nfunction getStoreMetadata$1(target) {\n  return getStoreMetadata(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\n\n\nfunction ensureSelectorMetadata$1(target) {\n  return ensureSelectorMetadata(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\n\n\nfunction getSelectorMetadata$1(target) {\n  return getSelectorMetadata(target);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Decorator for memoizing a state selector.\n * @template T\n * @param {?=} selectors\n * @return {?}\n */\n\n\nfunction Selector(selectors) {\n  return (\n    /**\n    * @template U\n    * @param {?} target\n    * @param {?} key\n    * @param {?} descriptor\n    * @return {?}\n    */\n    (target, key, descriptor) => {\n      // Caretaker note: we have still left the `typeof` condition in order to avoid\n      // creating a breaking change for projects that still use the View Engine.\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        /** @type {?} */\n        const isNotMethod = !(descriptor && descriptor.value !== null);\n\n        if (isNotMethod) {\n          throwSelectorDecoratorError();\n        }\n      }\n      /** @type {?} */\n\n\n      const originalFn = descriptor.value;\n      /** @type {?} */\n\n      const memoizedFn = createSelector(selectors,\n      /** @type {?} */\n      originalFn, {\n        containerClass: target,\n        selectorName: key.toString(),\n\n        /**\n         * @return {?}\n         */\n        getSelectorOptions() {\n          return {};\n        }\n\n      });\n      /** @type {?} */\n\n      const newDescriptor = {\n        configurable: true,\n\n        /**\n         * @return {?}\n         */\n        get() {\n          return memoizedFn;\n        }\n\n      }; // Add hidden property to descriptor\n\n      /** @type {?} */\n      newDescriptor['originalFn'] = originalFn;\n      return newDescriptor;\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template T\n */\n\n\nclass StateToken {\n  /**\n   * @param {?} name\n   */\n  constructor(name) {\n    this.name = name;\n    /** @type {?} */\n\n    const selectorMetadata = ensureSelectorMetadata(\n    /** @type {?} */\n    this);\n\n    selectorMetadata.makeRootSelector =\n    /**\n    * @param {?} runtimeContext\n    * @return {?}\n    */\n    runtimeContext => {\n      return runtimeContext.getStateGetter(this.name);\n    };\n  }\n  /**\n   * @return {?}\n   */\n\n\n  getName() {\n    return this.name;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  toString() {\n    return `StateToken[${this.name}]`;\n  }\n\n}\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  StateToken.prototype.name;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { Action, Actions, InitState, NGXS_PLUGINS, NgxsModule, NgxsSimpleChange, NoopNgxsExecutionStrategy, Select, Selector, SelectorOptions, State, StateStream, StateToken, Store, UpdateState, actionMatcher, createSelector, ensureSelectorMetadata$1 as ensureSelectorMetadata, ensureStoreMetadata$1 as ensureStoreMetadata, getActionTypeFromInstance, getSelectorMetadata$1 as getSelectorMetadata, getStoreMetadata$1 as getStoreMetadata, getValue, ofAction, ofActionCanceled, ofActionCompleted, ofActionDispatched, ofActionErrored, ofActionSuccessful, setValue, OrderedSubject as ɵa, InternalActions as ɵb, ROOT_STATE_TOKEN as ɵc, FEATURE_STATE_TOKEN as ɵd, SELECTOR_META_KEY as ɵe, NgxsConfig as ɵf, mergeDeep as ɵg, USER_PROVIDED_NGXS_EXECUTION_STRATEGY as ɵh, NGXS_EXECUTION_STRATEGY as ɵi, NgxsRootModule as ɵj, StateFactory as ɵk, InternalDispatchedActionResults as ɵl, InternalDispatcher as ɵm, StateContextFactory as ɵn, InternalStateOperations as ɵo, PluginManager as ɵp, InternalNgxsExecutionStrategy as ɵq, SelectFactory as ɵr, ensureStoreMetadata as ɵt, getStoreMetadata as ɵu, ensureSelectorMetadata as ɵv, getSelectorMetadata as ɵw, LifecycleStateManager as ɵx, NgxsFeatureModule as ɵy };","map":{"version":3,"names":["NgZone","Injectable","Inject","PLATFORM_ID","defineInjectable","inject","InjectionToken","INJECTOR","ɵglobal","Optional","SkipSelf","ErrorHandler","Injector","ɵivyEnabled","NgModule","APP_BOOTSTRAP_LISTENER","memoize","INITIAL_STATE_TOKEN","NgxsBootstrapper","NGXS_STATE_CONTEXT_FACTORY","NGXS_STATE_FACTORY","InitialState","isPlatformServer","Observable","Subject","BehaviorSubject","of","forkJoin","throwError","EMPTY","from","queueScheduler","filter","map","shareReplay","take","exhaustMap","mergeMap","defaultIfEmpty","catchError","takeUntil","tap","observeOn","distinctUntilChanged","throwStateNameError","name","Error","throwStateNamePropertyError","throwStateUniqueError","current","newName","oldName","throwStateDecoratorError","throwActionDecoratorError","throwSelectorDecoratorError","getZoneWarningMessage","getUndecoratedStateInIvyWarningMessage","throwSelectFactoryNotConnectedError","throwPatchingArrayError","throwPatchingPrimitiveError","DispatchOutsideZoneNgxsExecutionStrategy","constructor","_ngZone","_platformId","ngDevMode","verifyZoneIsNotNooped","enter","func","runInsideAngular","runOutsideAngular","leave","isInAngularZone","run","decorators","type","args","providedIn","ctorParameters","String","ngInjectableDef","factory","DispatchOutsideZoneNgxsExecutionStrategy_Factory","token","prototype","ngZone","console","warn","ROOT_STATE_TOKEN","FEATURE_STATE_TOKEN","NGXS_PLUGINS","META_KEY","META_OPTIONS_KEY","SELECTOR_META_KEY","NgxsConfig","defaultsState","selectorOptions","injectContainerState","suppressErrors","compatibility","strictContentSecurityPolicy","executionStrategy","developmentMode","StateContext","getState","setState","val","patchState","dispatch","actions","NgxsPlugin","handle","state","action","next","StoreOptions","defaults","children","NgxsSimpleChange","previousValue","currentValue","firstChange","NgxsOnInit","ngxsOnInit","ctx","NgxsOnChanges","ngxsOnChanges","change","NgxsAfterBootstrap","ngxsAfterBootstrap","NoopNgxsExecutionStrategy","NoopNgxsExecutionStrategy_Factory","USER_PROVIDED_NGXS_EXECUTION_STRATEGY","NGXS_EXECUTION_STRATEGY","injector","get","Zone","NgxsExecutionStrategy","getActionTypeFromInstance","actionMatcher","action1","type1","action2","setValue","obj","prop","Object","assign","split","lastIndex","length","reduce","acc","part","index","Array","isArray","slice","getValue","isObject","item","mergeDeep","base","sources","source","shift","key","StateClassInternal","StateOperations","actionOrActions","MetaDataModel","path","makeRootSelector","RuntimeSelectorContext","getStateGetter","getSelectorOptions","localOptions","SharedSelectorOptions","SelectorMetaDataModel","originalFn","containerClass","selectorName","MappedStore","isInitialised","instance","StatesAndDefaults","states","RootStateDiff","currentAppState","newAppState","ensureStoreMetadata","target","hasOwnProperty","defaultMetadata","context","defineProperty","value","getStoreMetadata","ensureSelectorMetadata","getSelectorMetadata","compliantPropGetter","paths","copyOfPaths","fastPropGetter","segments","seg","i","l","expr","fn","Function","propGetter","config","buildGraph","stateClasses","findName","stateClass","meta","find","g","result","nameToState","findFullParentPath","newObj","visit","child","keyToFind","indexOf","parent","topologicalSort","graph","sorted","visited","ancestors","push","forEach","dep","join","keys","k","reverse","isObject$1","getStateDiffChanges","mappedStore","diff","ActionCompletion","ofAction","allowedTypes","ofActionOperator","ofActionDispatched","ofActionSuccessful","ofActionCanceled","ofActionCompleted","allowedStatuses","mapActionResult","ofActionErrored","statuses","mapOperator","mapAction","allowedMap","createAllowedActionTypesMap","allowedStatusMap","createAllowedStatusesMap","o","pipe","filterStatus","actionType","typeMatch","statusMatch","status","error","successful","canceled","FilterMap","types","filterMap","klass","leaveNgxs","ngxsExecutionStrategy","sink","subscribe","complete","InternalNgxsExecutionStrategy","_executionStrategy","undefined","ActionStatus","Dispatched","Successful","Canceled","Errored","ActionContext","OrderedSubject","arguments","_itemQueue","_busyPushingNext","unshift","nextValue","pop","InternalActions","Actions","internalActions$","internalExecutionStrategy","observer","childSubscription","add","compose","funcs","curr","nextArgs","StateStream","ngOnDestroy","PluginManager","_parentManager","_pluginHandlers","plugins","registerHandlers","rootPlugins","pluginHandlers","getPluginHandlers","handlers","plugin","bind","InternalDispatchedActionResults","InternalDispatcher","_injector","_actions","_actionResults","_pluginManager","_stateStream","_ngxsExecutionStrategy","dispatchByEvents","_errorHandler","handleError","_a","dispatchSingle","prevState","nextState","nextAction","actionResult$","getActionResultStream","createDispatchObservable","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","call","isFrozen","InternalStateOperations","_dispatcher","_config","getRootStateOperations","rootStateOperations","newState","ensureStateAndActionsAreImmutable","setStateToTheCurrentWithNew","results","stateOperations","currentState","root","frozenValue","simplePatch","existingState","StateContextFactory","_internalStateOperations","createStateContext","setStateValue","newValue","setStateFromOperator","stateOperator","local","isStateOperator","patchOperator","StoreValidators","checkThatStateIsNamedCorrectly","stateNameRegex","test","checkThatStateNameIsUnique","stateName","statesByName","checkThatStateClassesHaveBeenDecorated","RegExp","ensureStateClassIsInjectable","ɵprov","StateFactory","_parentFactory","_stateContextFactory","_initialState","_actionsSubscription","_states","_statesByName","_statePaths","getRuntimeSelectorContext","stateFactory","resolveGetter","statePaths","getter","globalSelectorOptions","cloneDefaults","unsubscribe","newStates","addToStatesMap","stateGraph","sortedStates","nameGraph","bootstrappedStores","addRuntimeInfoToMeta","stateMap","hasBeenMountedAndBootstrapped","addAndReturnDefaults","classes","mappedStores","connectActionHandlers","dispatched$","invokeActions","metadata","actionMetas","actionMeta","stateContext","Promise","options","cancelUncompleted","e","statesMap","unmountedState","valueIsBootstrappedInInitialState","LifecycleStateManager","internalStateOperations","stateContextFactory","bootstrapper","ngxsBootstrap","invokeInit","appBootstrapped$","appBootstrapped","invokeBootstrap","firstDiffChange","getStateContext","SELECTOR_OPTIONS_META_KEY","selectorOptionsMetaAccessor","getOptions","defineOptions","CreationMetadata","RuntimeSelectorInfo","argumentSelectorFunctions","createSelector","selectors","creationMetadata","wrappedFn","wrappedSelectorFn","returnValue","apply","innerMemoizedFn","memoizedFn","setPrototypeOf","selectorMetaData","setupSelectorMetadata","getRuntimeSelectorInfo","selectFromRoot","rootState","argFn","ex","TypeError","getExplicitSelectorOptions","selectorMetaDataClone","getLocalSelectorOptions","localSelectorOptions","selectorsToApply","getSelectorsToApply","selector","getRootSelectorFactory","explicitOptions","canInjectContainerState","Store","_internalExecutionStrategy","_stateFactory","initialStateValue","_selectableStateStream","bufferSize","refCount","initStateStream","select","selectorFn","getStoreBoundSelectorFn","err","selectOnce","selectSnapshot","snapshot","reset","makeSelectorFn","runtimeContext","storeIsEmpty","defaultStateNotEmpty","storeValues","SelectFactory","store","InitState","UpdateState","addedStates","NgxsRootModule","_store","_select","lifecycleStateManager","NgxsFeatureModule","flattenedStates","flattenStates","total","values","concat","NgxsModule","forRoot","ngModule","providers","ngxsTokenProviders","forFeature","provide","multi","useValue","ROOT_OPTIONS","useFactory","ngxsConfigFactory","deps","appBootstrapListenerFactory","getInitialState","useExisting","bootstrap","Action","isStaticMethod","MutateMetaOptions","inheritedStateClass","optionsWithInheritance","State","getStateOptions","inheritanceOptions","mutateMetaData","params","getName","inheritedMeta","getPrototypeOf","DOLLAR_CHAR_CODE","createSelectObservable","createSelectorFn","rawSelector","removeDollarAtTheEnd","propsArray","lastCharIndex","dollarAtTheEnd","charCodeAt","Select","toString","selectorId","defineProperties","writable","enumerable","configurable","SelectorOptions","decorate","methodName","descriptor","MetaDataModel$1","SelectorMetaDataModel$1","ensureStoreMetadata$1","getStoreMetadata$1","ensureSelectorMetadata$1","getSelectorMetadata$1","Selector","isNotMethod","newDescriptor","StateToken","selectorMetadata","ɵa","ɵb","ɵc","ɵd","ɵe","ɵf","ɵg","ɵh","ɵi","ɵj","ɵk","ɵl","ɵm","ɵn","ɵo","ɵp","ɵq","ɵr","ɵt","ɵu","ɵv","ɵw","ɵx","ɵy"],"sources":["/home/melisagulsan/workspace/Project/product-catalog-project/node_modules/@ngxs/store/fesm2015/ngxs-store.js"],"sourcesContent":["import { NgZone, Injectable, Inject, PLATFORM_ID, defineInjectable, inject, InjectionToken, INJECTOR, ɵglobal, Optional, SkipSelf, ErrorHandler, Injector, ɵivyEnabled, NgModule, APP_BOOTSTRAP_LISTENER } from '@angular/core';\nimport { memoize, INITIAL_STATE_TOKEN, NgxsBootstrapper, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, InitialState } from '@ngxs/store/internals';\nimport { isPlatformServer } from '@angular/common';\nimport { Observable, Subject, BehaviorSubject, of, forkJoin, throwError, EMPTY, from, queueScheduler } from 'rxjs';\nimport { filter, map, shareReplay, take, exhaustMap, mergeMap, defaultIfEmpty, catchError, takeUntil, tap, observeOn, distinctUntilChanged } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} name\n * @return {?}\n */\nfunction throwStateNameError(name) {\n    throw new Error(`${name} is not a valid state name. It needs to be a valid object property name.`);\n}\n/**\n * @return {?}\n */\nfunction throwStateNamePropertyError() {\n    throw new Error(`States must register a 'name' property.`);\n}\n/**\n * @param {?} current\n * @param {?} newName\n * @param {?} oldName\n * @return {?}\n */\nfunction throwStateUniqueError(current, newName, oldName) {\n    throw new Error(`State name '${current}' from ${newName} already exists in ${oldName}.`);\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction throwStateDecoratorError(name) {\n    throw new Error(`States must be decorated with @State() decorator, but \"${name}\" isn't.`);\n}\n/**\n * @return {?}\n */\nfunction throwActionDecoratorError() {\n    throw new Error('@Action() decorator cannot be used with static methods.');\n}\n/**\n * @return {?}\n */\nfunction throwSelectorDecoratorError() {\n    throw new Error('Selectors only work on methods.');\n}\n/**\n * @return {?}\n */\nfunction getZoneWarningMessage() {\n    return ('Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\n        'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\n        'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })');\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction getUndecoratedStateInIvyWarningMessage(name) {\n    return `'${name}' class should be decorated with @Injectable() right after the @State() decorator`;\n}\n/**\n * @return {?}\n */\nfunction throwSelectFactoryNotConnectedError() {\n    throw new Error('You have forgotten to import the NGXS module!');\n}\n/**\n * @return {?}\n */\nfunction throwPatchingArrayError() {\n    throw new Error('Patching arrays is not supported.');\n}\n/**\n * @return {?}\n */\nfunction throwPatchingPrimitiveError() {\n    throw new Error('Patching primitives is not supported.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DispatchOutsideZoneNgxsExecutionStrategy {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platformId\n     */\n    constructor(_ngZone, _platformId) {\n        this._ngZone = _ngZone;\n        this._platformId = _platformId;\n        // Caretaker note: we have still left the `typeof` condition in order to avoid\n        // creating a breaking change for projects that still use the View Engine.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            verifyZoneIsNotNooped(_ngZone);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    enter(func) {\n        if (isPlatformServer(this._platformId)) {\n            return this.runInsideAngular(func);\n        }\n        return this.runOutsideAngular(func);\n    }\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    leave(func) {\n        return this.runInsideAngular(func);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    runInsideAngular(func) {\n        if (NgZone.isInAngularZone()) {\n            return func();\n        }\n        return this._ngZone.run(func);\n    }\n    /**\n     * @private\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    runOutsideAngular(func) {\n        if (NgZone.isInAngularZone()) {\n            return this._ngZone.runOutsideAngular(func);\n        }\n        return func();\n    }\n}\nDispatchOutsideZoneNgxsExecutionStrategy.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nDispatchOutsideZoneNgxsExecutionStrategy.ctorParameters = () => [\n    { type: NgZone },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\n/** @nocollapse */ DispatchOutsideZoneNgxsExecutionStrategy.ngInjectableDef = defineInjectable({ factory: function DispatchOutsideZoneNgxsExecutionStrategy_Factory() { return new DispatchOutsideZoneNgxsExecutionStrategy(inject(NgZone), inject(PLATFORM_ID)); }, token: DispatchOutsideZoneNgxsExecutionStrategy, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DispatchOutsideZoneNgxsExecutionStrategy.prototype._platformId;\n}\n// Caretaker note: this should exist as a separate function and not a class method,\n// since class methods are not tree-shakable.\n/**\n * @param {?} ngZone\n * @return {?}\n */\nfunction verifyZoneIsNotNooped(ngZone) {\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\n    // to be used outside of the core Angular code, thus we just have\n    // to check if the zone doesn't extend or instanceof `NgZone`.\n    if (ngZone instanceof NgZone) {\n        return;\n    }\n    console.warn(getZoneWarningMessage());\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst ROOT_STATE_TOKEN = new InjectionToken('ROOT_STATE_TOKEN');\n/** @type {?} */\nconst FEATURE_STATE_TOKEN = new InjectionToken('FEATURE_STATE_TOKEN');\n/** @type {?} */\nconst NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\n/** @type {?} */\nconst META_KEY = 'NGXS_META';\n/** @type {?} */\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\n/** @type {?} */\nconst SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\n/**\n * The NGXS config settings.\n */\nclass NgxsConfig {\n    constructor() {\n        /**\n         * Defining the default state before module initialization\n         * This is convenient if we need to create a define our own set of states.\n         * @deprecated will be removed after v4\n         * (default: {})\n         */\n        this.defaultsState = {};\n        /**\n         * Defining shared selector options\n         */\n        this.selectorOptions = {\n            injectContainerState: true,\n            // TODO: default is true in v3, will change in v4\n            suppressErrors: true // TODO: default is true in v3, will change in v4\n        };\n        this.compatibility = {\n            strictContentSecurityPolicy: false\n        };\n        this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\n    }\n}\nNgxsConfig.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nNgxsConfig.ctorParameters = () => [];\nif (false) {\n    /**\n     * Run in development mode. This will add additional debugging features:\n     * - Object.freeze on the state and actions to guarantee immutability\n     * (default: false)\n     *\n     * Note: this property will be accounted only in development mode when using the Ivy compiler.\n     * It makes sense to use it only during development to ensure there're no state mutations.\n     * When building for production, the Object.freeze will be tree-shaken away.\n     * @type {?}\n     */\n    NgxsConfig.prototype.developmentMode;\n    /** @type {?} */\n    NgxsConfig.prototype.compatibility;\n    /**\n     * Determines the execution context to perform async operations inside. An implementation can be\n     * provided to override the default behaviour where the async operations are run\n     * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\n     * These observable behaviours are from:\n     *   `\\@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\n     * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\n     * application doesn't rely on zone.js running change detection then you can switch to the\n     * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\n     * (default: null)\n     * @type {?}\n     */\n    NgxsConfig.prototype.executionStrategy;\n    /**\n     * Defining the default state before module initialization\n     * This is convenient if we need to create a define our own set of states.\n     * @deprecated will be removed after v4\n     * (default: {})\n     * @type {?}\n     */\n    NgxsConfig.prototype.defaultsState;\n    /**\n     * Defining shared selector options\n     * @type {?}\n     */\n    NgxsConfig.prototype.selectorOptions;\n}\n/**\n * State context provided to the actions in the state.\n * @record\n * @template T\n */\nfunction StateContext() { }\nif (false) {\n    /**\n     * Get the current state.\n     * @return {?}\n     */\n    StateContext.prototype.getState = function () { };\n    /**\n     * Reset the state to a new value.\n     * @param {?} val\n     * @return {?}\n     */\n    StateContext.prototype.setState = function (val) { };\n    /**\n     * Patch the existing state with the provided value.\n     * @param {?} val\n     * @return {?}\n     */\n    StateContext.prototype.patchState = function (val) { };\n    /**\n     * Dispatch a new action and return the dispatched observable.\n     * @param {?} actions\n     * @return {?}\n     */\n    StateContext.prototype.dispatch = function (actions) { };\n}\n/**\n * Plugin interface\n * @record\n */\nfunction NgxsPlugin() { }\nif (false) {\n    /**\n     * Handle the state/action before its submitted to the state handlers.\n     * @param {?} state\n     * @param {?} action\n     * @param {?} next\n     * @return {?}\n     */\n    NgxsPlugin.prototype.handle = function (state, action, next) { };\n}\n/**\n * Options that can be provided to the store.\n * @record\n * @template T\n */\nfunction StoreOptions() { }\nif (false) {\n    /**\n     * Name of the state. Required.\n     * @type {?}\n     */\n    StoreOptions.prototype.name;\n    /**\n     * Default values for the state. If not provided, uses empty object.\n     * @type {?|undefined}\n     */\n    StoreOptions.prototype.defaults;\n    /**\n     * Sub states for the given state.\n     * @type {?|undefined}\n     */\n    StoreOptions.prototype.children;\n}\n/**\n * Represents a basic change from a previous to a new value for a single state instance.\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\n * @template T\n */\nclass NgxsSimpleChange {\n    /**\n     * @param {?} previousValue\n     * @param {?} currentValue\n     * @param {?} firstChange\n     */\n    constructor(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n}\nif (false) {\n    /** @type {?} */\n    NgxsSimpleChange.prototype.previousValue;\n    /** @type {?} */\n    NgxsSimpleChange.prototype.currentValue;\n    /** @type {?} */\n    NgxsSimpleChange.prototype.firstChange;\n}\n/**\n * On init interface\n * @record\n */\nfunction NgxsOnInit() { }\nif (false) {\n    /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    NgxsOnInit.prototype.ngxsOnInit = function (ctx) { };\n}\n/**\n * On change interface\n * @record\n */\nfunction NgxsOnChanges() { }\nif (false) {\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    NgxsOnChanges.prototype.ngxsOnChanges = function (change) { };\n}\n/**\n * After bootstrap interface\n * @record\n */\nfunction NgxsAfterBootstrap() { }\nif (false) {\n    /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    NgxsAfterBootstrap.prototype.ngxsAfterBootstrap = function (ctx) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NoopNgxsExecutionStrategy {\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    enter(func) {\n        return func();\n    }\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    leave(func) {\n        return func();\n    }\n}\nNoopNgxsExecutionStrategy.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ NoopNgxsExecutionStrategy.ngInjectableDef = defineInjectable({ factory: function NoopNgxsExecutionStrategy_Factory() { return new NoopNgxsExecutionStrategy(); }, token: NoopNgxsExecutionStrategy, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The strategy that might be provided by users through `options.executionStrategy`.\n * @type {?}\n */\nconst USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');\n/*\n * Internal execution strategy injection token\n */\n/** @type {?} */\nconst NGXS_EXECUTION_STRATEGY = new InjectionToken('NGXS_EXECUTION_STRATEGY', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => {\n        /** @type {?} */\n        const injector = inject(INJECTOR);\n        /** @type {?} */\n        const executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);\n        return executionStrategy\n            ? injector.get(executionStrategy)\n            : injector.get(typeof ɵglobal.Zone !== 'undefined'\n                ? DispatchOutsideZoneNgxsExecutionStrategy\n                : NoopNgxsExecutionStrategy);\n    })\n});\n/**\n * @record\n */\nfunction NgxsExecutionStrategy() { }\nif (false) {\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    NgxsExecutionStrategy.prototype.enter = function (func) { };\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    NgxsExecutionStrategy.prototype.leave = function (func) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the type from an action instance/class.\n * @ignore\n * @param {?} action\n * @return {?}\n */\nfunction getActionTypeFromInstance(action) {\n    if (action.constructor && action.constructor.type) {\n        return action.constructor.type;\n    }\n    else {\n        return action.type;\n    }\n}\n/**\n * Matches a action\n * @ignore\n * @param {?} action1\n * @return {?}\n */\nfunction actionMatcher(action1) {\n    /** @type {?} */\n    const type1 = getActionTypeFromInstance(action1);\n    return (/**\n     * @param {?} action2\n     * @return {?}\n     */\n    function (action2) {\n        return type1 === getActionTypeFromInstance(action2);\n    });\n}\n/**\n * Set a deeply nested value. Example:\n *\n *   setValue({ foo: { bar: { eat: false } } },\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\n *\n * While it traverses it also creates new objects from top down.\n *\n * @ignore\n * @type {?}\n */\nconst setValue = (/**\n * @param {?} obj\n * @param {?} prop\n * @param {?} val\n * @return {?}\n */\n(obj, prop, val) => {\n    obj = Object.assign({}, obj);\n    /** @type {?} */\n    const split = prop.split('.');\n    /** @type {?} */\n    const lastIndex = split.length - 1;\n    split.reduce((/**\n     * @param {?} acc\n     * @param {?} part\n     * @param {?} index\n     * @return {?}\n     */\n    (acc, part, index) => {\n        if (index === lastIndex) {\n            acc[part] = val;\n        }\n        else {\n            acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : Object.assign({}, acc[part]);\n        }\n        return acc && acc[part];\n    }), obj);\n    return obj;\n});\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n * @type {?}\n */\nconst getValue = (/**\n * @param {?} obj\n * @param {?} prop\n * @return {?}\n */\n(obj, prop) => prop.split('.').reduce((/**\n * @param {?} acc\n * @param {?} part\n * @return {?}\n */\n(acc, part) => acc && acc[part]), obj));\n/**\n * Simple object check.\n *\n *    isObject({a:1}) //=> true\n *    isObject(1) //=> false\n *\n * @ignore\n * @type {?}\n */\nconst isObject = (/**\n * @param {?} item\n * @return {?}\n */\n(item) => {\n    return item && typeof item === 'object' && !Array.isArray(item);\n});\n/**\n * Deep merge two objects.\n *\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\n *\n * \\@param base base object onto which `sources` will be applied\n * @type {?}\n */\nconst mergeDeep = (/**\n * @param {?} base\n * @param {...?} sources\n * @return {?}\n */\n(base, ...sources) => {\n    if (!sources.length)\n        return base;\n    /** @type {?} */\n    const source = sources.shift();\n    if (isObject(base) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!base[key])\n                    Object.assign(base, { [key]: {} });\n                mergeDeep(base[key], source[key]);\n            }\n            else {\n                Object.assign(base, { [key]: source[key] });\n            }\n        }\n    }\n    return mergeDeep(base, ...sources);\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T, U\n */\nfunction StateClassInternal() { }\nif (false) {\n    /* Skipping unnamed member:\n    [META_KEY]?: MetaDataModel;*/\n    /* Skipping unnamed member:\n    [META_OPTIONS_KEY]?: StoreOptions<U>;*/\n}\n/**\n * @record\n * @template T\n */\nfunction StateOperations() { }\nif (false) {\n    /**\n     * @return {?}\n     */\n    StateOperations.prototype.getState = function () { };\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    StateOperations.prototype.setState = function (val) { };\n    /**\n     * @param {?} actionOrActions\n     * @return {?}\n     */\n    StateOperations.prototype.dispatch = function (actionOrActions) { };\n}\n/**\n * @record\n */\nfunction MetaDataModel() { }\nif (false) {\n    /** @type {?} */\n    MetaDataModel.prototype.name;\n    /** @type {?} */\n    MetaDataModel.prototype.actions;\n    /** @type {?} */\n    MetaDataModel.prototype.defaults;\n    /** @type {?} */\n    MetaDataModel.prototype.path;\n    /** @type {?} */\n    MetaDataModel.prototype.makeRootSelector;\n    /** @type {?|undefined} */\n    MetaDataModel.prototype.children;\n}\n/**\n * @record\n */\nfunction RuntimeSelectorContext() { }\nif (false) {\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    RuntimeSelectorContext.prototype.getStateGetter = function (key) { };\n    /**\n     * @param {?=} localOptions\n     * @return {?}\n     */\n    RuntimeSelectorContext.prototype.getSelectorOptions = function (localOptions) { };\n}\n/**\n * @record\n */\nfunction SharedSelectorOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    SharedSelectorOptions.prototype.injectContainerState;\n    /** @type {?|undefined} */\n    SharedSelectorOptions.prototype.suppressErrors;\n}\n/**\n * @record\n */\nfunction SelectorMetaDataModel() { }\nif (false) {\n    /** @type {?} */\n    SelectorMetaDataModel.prototype.makeRootSelector;\n    /** @type {?} */\n    SelectorMetaDataModel.prototype.originalFn;\n    /** @type {?} */\n    SelectorMetaDataModel.prototype.containerClass;\n    /** @type {?} */\n    SelectorMetaDataModel.prototype.selectorName;\n    /** @type {?} */\n    SelectorMetaDataModel.prototype.getSelectorOptions;\n}\n/**\n * @record\n */\nfunction MappedStore() { }\nif (false) {\n    /** @type {?} */\n    MappedStore.prototype.name;\n    /** @type {?} */\n    MappedStore.prototype.isInitialised;\n    /** @type {?} */\n    MappedStore.prototype.actions;\n    /** @type {?} */\n    MappedStore.prototype.defaults;\n    /** @type {?} */\n    MappedStore.prototype.instance;\n    /** @type {?} */\n    MappedStore.prototype.path;\n}\n/**\n * @record\n */\nfunction StatesAndDefaults() { }\nif (false) {\n    /** @type {?} */\n    StatesAndDefaults.prototype.defaults;\n    /** @type {?} */\n    StatesAndDefaults.prototype.states;\n}\n/**\n * @record\n * @template T\n */\nfunction RootStateDiff() { }\nif (false) {\n    /** @type {?} */\n    RootStateDiff.prototype.currentAppState;\n    /** @type {?} */\n    RootStateDiff.prototype.newAppState;\n}\n/**\n * Ensures metadata is attached to the class and returns it.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\nfunction ensureStoreMetadata(target) {\n    if (!target.hasOwnProperty(META_KEY)) {\n        /** @type {?} */\n        const defaultMetadata = {\n            name: null,\n            actions: {},\n            defaults: {},\n            path: null,\n            /**\n             * @param {?} context\n             * @return {?}\n             */\n            makeRootSelector(context) {\n                return context.getStateGetter(defaultMetadata.name);\n            },\n            children: []\n        };\n        Object.defineProperty(target, META_KEY, { value: defaultMetadata });\n    }\n    return getStoreMetadata(target);\n}\n/**\n * Get the metadata attached to the state class if it exists.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\nfunction getStoreMetadata(target) {\n    return (/** @type {?} */ (target[META_KEY]));\n}\n/**\n * Ensures metadata is attached to the selector and returns it.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\nfunction ensureSelectorMetadata(target) {\n    if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\n        /** @type {?} */\n        const defaultMetadata = {\n            makeRootSelector: null,\n            originalFn: null,\n            containerClass: null,\n            selectorName: null,\n            getSelectorOptions: (/**\n             * @return {?}\n             */\n            () => ({}))\n        };\n        Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\n    }\n    return getSelectorMetadata(target);\n}\n/**\n * Get the metadata attached to the selector if it exists.\n *\n * @ignore\n * @param {?} target\n * @return {?}\n */\nfunction getSelectorMetadata(target) {\n    return target[SELECTOR_META_KEY];\n}\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\n *\n * @ignore\n * @param {?} paths\n * @return {?}\n */\nfunction compliantPropGetter(paths) {\n    /** @type {?} */\n    const copyOfPaths = paths.slice();\n    return (/**\n     * @param {?} obj\n     * @return {?}\n     */\n    obj => copyOfPaths.reduce((/**\n     * @param {?} acc\n     * @param {?} part\n     * @return {?}\n     */\n    (acc, part) => acc && acc[part]), obj));\n}\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize\n *\n * @ignore\n * @param {?} paths\n * @return {?}\n */\nfunction fastPropGetter(paths) {\n    /** @type {?} */\n    const segments = paths;\n    /** @type {?} */\n    let seg = 'store.' + segments[0];\n    /** @type {?} */\n    let i = 0;\n    /** @type {?} */\n    const l = segments.length;\n    /** @type {?} */\n    let expr = seg;\n    while (++i < l) {\n        expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n    }\n    /** @type {?} */\n    const fn = new Function('store', 'return ' + expr + ';');\n    return (/** @type {?} */ (fn));\n}\n/**\n * Get a deeply nested value. Example:\n *\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\n *\n * @ignore\n * @param {?} paths\n * @param {?} config\n * @return {?}\n */\nfunction propGetter(paths, config) {\n    if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\n        return compliantPropGetter(paths);\n    }\n    else {\n        return fastPropGetter(paths);\n    }\n}\n/**\n * Given an array of states, it will return a object graph. Example:\n *    const states = [\n *      Cart,\n *      CartSaved,\n *      CartSavedItems\n *    ]\n *\n * would return:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * @ignore\n * @param {?} stateClasses\n * @return {?}\n */\nfunction buildGraph(stateClasses) {\n    /** @type {?} */\n    const findName = (/**\n     * @param {?} stateClass\n     * @return {?}\n     */\n    (stateClass) => {\n        /** @type {?} */\n        const meta = stateClasses.find((/**\n         * @param {?} g\n         * @return {?}\n         */\n        g => g === stateClass));\n        // Caretaker note: we have still left the `typeof` condition in order to avoid\n        // creating a breaking change for projects that still use the View Engine.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !meta) {\n            throw new Error(`Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`);\n        }\n        return (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (meta))[META_KEY])).name));\n    });\n    return stateClasses.reduce((/**\n     * @param {?} result\n     * @param {?} stateClass\n     * @return {?}\n     */\n    (result, stateClass) => {\n        const { name, children } = (/** @type {?} */ (stateClass[META_KEY]));\n        result[(/** @type {?} */ (name))] = (children || []).map(findName);\n        return result;\n    }), {});\n}\n/**\n * Given a states array, returns object graph\n * returning the name and state metadata. Example:\n *\n *  const graph = {\n *    cart: { metadata }\n *  };\n *\n * @ignore\n * @param {?} states\n * @return {?}\n */\nfunction nameToState(states) {\n    return states.reduce((/**\n     * @param {?} result\n     * @param {?} stateClass\n     * @return {?}\n     */\n    (result, stateClass) => {\n        /** @type {?} */\n        const meta = (/** @type {?} */ (stateClass[META_KEY]));\n        result[(/** @type {?} */ (meta.name))] = stateClass;\n        return result;\n    }), {});\n}\n/**\n * Given a object relationship graph will return the full path\n * for the child items. Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const r = {\n *    cart: 'cart',\n *    saved: 'cart.saved',\n *    items: 'cart.saved.items'\n *  };\n *\n * @ignore\n * @param {?} obj\n * @param {?=} newObj\n * @return {?}\n */\nfunction findFullParentPath(obj, newObj = {}) {\n    /** @type {?} */\n    const visit = (/**\n     * @param {?} child\n     * @param {?} keyToFind\n     * @return {?}\n     */\n    (child, keyToFind) => {\n        for (const key in child) {\n            if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\n                /** @type {?} */\n                const parent = visit(child, key);\n                return parent !== null ? `${parent}.${key}` : key;\n            }\n        }\n        return null;\n    });\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            /** @type {?} */\n            const parent = visit(obj, key);\n            newObj[key] = parent ? `${parent}.${key}` : key;\n        }\n    }\n    return newObj;\n}\n/**\n * Given a object graph, it will return the items topologically sorted Example:\n *\n *  const graph = {\n *    cart: ['saved'],\n *    saved: ['items'],\n *    items: []\n *  };\n *\n * would return:\n *\n *  const results = [\n *    'items',\n *    'saved',\n *    'cart'\n *  ];\n *\n * @ignore\n * @param {?} graph\n * @return {?}\n */\nfunction topologicalSort(graph) {\n    /** @type {?} */\n    const sorted = [];\n    /** @type {?} */\n    const visited = {};\n    /** @type {?} */\n    const visit = (/**\n     * @param {?} name\n     * @param {?=} ancestors\n     * @return {?}\n     */\n    (name, ancestors = []) => {\n        if (!Array.isArray(ancestors)) {\n            ancestors = [];\n        }\n        ancestors.push(name);\n        visited[name] = true;\n        graph[name].forEach((/**\n         * @param {?} dep\n         * @return {?}\n         */\n        (dep) => {\n            // Caretaker note: we have still left the `typeof` condition in order to avoid\n            // creating a breaking change for projects that still use the View Engine.\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && ancestors.indexOf(dep) >= 0) {\n                throw new Error(`Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`);\n            }\n            if (visited[dep]) {\n                return;\n            }\n            visit(dep, ancestors.slice(0));\n        }));\n        if (sorted.indexOf(name) < 0) {\n            sorted.push(name);\n        }\n    });\n    Object.keys(graph).forEach((/**\n     * @param {?} k\n     * @return {?}\n     */\n    k => visit(k)));\n    return sorted.reverse();\n}\n/**\n * Returns if the parameter is a object or not.\n *\n * @ignore\n * @param {?} obj\n * @return {?}\n */\nfunction isObject$1(obj) {\n    return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\n}\n/**\n * @template T\n * @param {?} mappedStore\n * @param {?} diff\n * @return {?}\n */\nfunction getStateDiffChanges(mappedStore, diff) {\n    /** @type {?} */\n    const previousValue = getValue(diff.currentAppState, mappedStore.path);\n    /** @type {?} */\n    const currentValue = getValue(diff.newAppState, mappedStore.path);\n    return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T, E\n */\nfunction ActionCompletion() { }\nif (false) {\n    /** @type {?} */\n    ActionCompletion.prototype.action;\n    /** @type {?} */\n    ActionCompletion.prototype.result;\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will grab actions that have just been dispatched as well as actions that have completed\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofAction(...allowedTypes) {\n    return ofActionOperator(allowedTypes);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been dispatched\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofActionDispatched(...allowedTypes) {\n    return ofActionOperator(allowedTypes, [\"DISPATCHED\" /* Dispatched */]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been successfully completed\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofActionSuccessful(...allowedTypes) {\n    return ofActionOperator(allowedTypes, [\"SUCCESSFUL\" /* Successful */]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been canceled\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofActionCanceled(...allowedTypes) {\n    return ofActionOperator(allowedTypes, [\"CANCELED\" /* Canceled */]);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just been completed\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofActionCompleted(...allowedTypes) {\n    /** @type {?} */\n    const allowedStatuses = [\n        \"SUCCESSFUL\" /* Successful */,\n        \"CANCELED\" /* Canceled */,\n        \"ERRORED\" /* Errored */\n    ];\n    return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\n}\n/**\n * RxJS operator for selecting out specific actions.\n *\n * This will ONLY grab actions that have just thrown an error\n * @template T\n * @param {...?} allowedTypes\n * @return {?}\n */\nfunction ofActionErrored(...allowedTypes) {\n    return ofActionOperator(allowedTypes, [\"ERRORED\" /* Errored */]);\n}\n/**\n * @param {?} allowedTypes\n * @param {?=} statuses\n * @param {?=} mapOperator\n * @return {?}\n */\nfunction ofActionOperator(allowedTypes, statuses, \n// This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\n// since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\n// defaults to `any`, thus there is no sense from union type.\nmapOperator = mapAction) {\n    /** @type {?} */\n    const allowedMap = createAllowedActionTypesMap(allowedTypes);\n    /** @type {?} */\n    const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\n    return (/**\n     * @param {?} o\n     * @return {?}\n     */\n    function (o) {\n        return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\n    });\n}\n/**\n * @param {?} allowedTypes\n * @param {?=} allowedStatuses\n * @return {?}\n */\nfunction filterStatus(allowedTypes, allowedStatuses) {\n    return filter((/**\n     * @param {?} ctx\n     * @return {?}\n     */\n    (ctx) => {\n        /** @type {?} */\n        const actionType = (/** @type {?} */ (getActionTypeFromInstance(ctx.action)));\n        /** @type {?} */\n        const typeMatch = allowedTypes[actionType];\n        /** @type {?} */\n        const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\n        return typeMatch && statusMatch;\n    }));\n}\n/**\n * @return {?}\n */\nfunction mapActionResult() {\n    return map((/**\n     * @param {?} __0\n     * @return {?}\n     */\n    ({ action, status, error }) => {\n        return (/** @type {?} */ ({\n            action,\n            result: {\n                successful: \"SUCCESSFUL\" /* Successful */ === status,\n                canceled: \"CANCELED\" /* Canceled */ === status,\n                error\n            }\n        }));\n    }));\n}\n/**\n * @template T\n * @return {?}\n */\nfunction mapAction() {\n    return map((/**\n     * @param {?} ctx\n     * @return {?}\n     */\n    (ctx) => (/** @type {?} */ (ctx.action))));\n}\n/**\n * @record\n */\nfunction FilterMap() { }\n/**\n * @param {?} types\n * @return {?}\n */\nfunction createAllowedActionTypesMap(types) {\n    return types.reduce((/**\n     * @param {?} filterMap\n     * @param {?} klass\n     * @return {?}\n     */\n    (filterMap, klass) => {\n        filterMap[(/** @type {?} */ (getActionTypeFromInstance(klass)))] = true;\n        return filterMap;\n    }), (/** @type {?} */ ({})));\n}\n/**\n * @param {?} statuses\n * @return {?}\n */\nfunction createAllowedStatusesMap(statuses) {\n    return statuses.reduce((/**\n     * @param {?} filterMap\n     * @param {?} status\n     * @return {?}\n     */\n    (filterMap, status) => {\n        filterMap[status] = true;\n        return filterMap;\n    }), (/** @type {?} */ ({})));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns operator that will run\n * `subscribe` outside of the ngxs execution context\n * @template T\n * @param {?} ngxsExecutionStrategy\n * @return {?}\n */\nfunction leaveNgxs(ngxsExecutionStrategy) {\n    return (/**\n     * @param {?} source\n     * @return {?}\n     */\n    (source) => {\n        return new Observable((/**\n         * @param {?} sink\n         * @return {?}\n         */\n        (sink) => {\n            return source.subscribe({\n                /**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                next(value) {\n                    ngxsExecutionStrategy.leave((/**\n                     * @return {?}\n                     */\n                    () => sink.next(value)));\n                },\n                /**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                error(error) {\n                    ngxsExecutionStrategy.leave((/**\n                     * @return {?}\n                     */\n                    () => sink.error(error)));\n                },\n                /**\n                 * @return {?}\n                 */\n                complete() {\n                    ngxsExecutionStrategy.leave((/**\n                     * @return {?}\n                     */\n                    () => sink.complete()));\n                }\n            });\n        }));\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InternalNgxsExecutionStrategy {\n    /**\n     * @param {?} _executionStrategy\n     */\n    constructor(_executionStrategy) {\n        this._executionStrategy = _executionStrategy;\n    }\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    enter(func) {\n        return this._executionStrategy.enter(func);\n    }\n    /**\n     * @template T\n     * @param {?} func\n     * @return {?}\n     */\n    leave(func) {\n        return this._executionStrategy.leave(func);\n    }\n}\nInternalNgxsExecutionStrategy.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nInternalNgxsExecutionStrategy.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [NGXS_EXECUTION_STRATEGY,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalNgxsExecutionStrategy.prototype._executionStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ActionStatus = {\n    Dispatched: 'DISPATCHED',\n    Successful: 'SUCCESSFUL',\n    Canceled: 'CANCELED',\n    Errored: 'ERRORED',\n};\n/**\n * @record\n * @template T\n */\nfunction ActionContext() { }\nif (false) {\n    /** @type {?} */\n    ActionContext.prototype.status;\n    /** @type {?} */\n    ActionContext.prototype.action;\n    /** @type {?|undefined} */\n    ActionContext.prototype.error;\n}\n/**\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\n * A standard Subject does not have this guarantee.\n * For example, given the following code:\n * ```typescript\n *   const subject = new Subject<string>();\n * subject.subscribe(value => {\n * if (value === 'start') subject.next('end');\n * });\n * subject.subscribe(value => { });\n * subject.next('start');\n * ```\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\n * @template T\n */\nclass OrderedSubject extends Subject {\n    constructor() {\n        super(...arguments);\n        this._itemQueue = [];\n        this._busyPushingNext = false;\n    }\n    /**\n     * @param {?=} value\n     * @return {?}\n     */\n    next(value) {\n        if (this._busyPushingNext) {\n            this._itemQueue.unshift((/** @type {?} */ (value)));\n            return;\n        }\n        this._busyPushingNext = true;\n        super.next(value);\n        while (this._itemQueue.length > 0) {\n            /** @type {?} */\n            const nextValue = this._itemQueue.pop();\n            super.next(nextValue);\n        }\n        this._busyPushingNext = false;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    OrderedSubject.prototype._itemQueue;\n    /**\n     * @type {?}\n     * @private\n     */\n    OrderedSubject.prototype._busyPushingNext;\n}\n/**\n * Internal Action stream that is emitted anytime an action is dispatched.\n */\nclass InternalActions extends OrderedSubject {\n}\nInternalActions.decorators = [\n    { type: Injectable }\n];\n/**\n * Action stream that is emitted anytime an action is dispatched.\n *\n * You can listen to this in services to react without stores.\n */\nclass Actions extends Observable {\n    /**\n     * @param {?} internalActions$\n     * @param {?} internalExecutionStrategy\n     */\n    constructor(internalActions$, internalExecutionStrategy) {\n        super((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        observer => {\n            /** @type {?} */\n            const childSubscription = internalActions$\n                .pipe(leaveNgxs(internalExecutionStrategy))\n                .subscribe({\n                next: (/**\n                 * @param {?} ctx\n                 * @return {?}\n                 */\n                ctx => observer.next(ctx)),\n                error: (/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                error => observer.error(error)),\n                complete: (/**\n                 * @return {?}\n                 */\n                () => observer.complete())\n            });\n            observer.add(childSubscription);\n        }));\n    }\n}\nActions.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nActions.ctorParameters = () => [\n    { type: InternalActions },\n    { type: InternalNgxsExecutionStrategy }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Composes a array of functions from left to right. Example:\n *\n *      compose([fn, final])(state, action);\n *\n * then the funcs have a signature like:\n *\n *      function fn (state, action, next) {\n *          console.log('here', state, action, next);\n *          return next(state, action);\n *      }\n *\n *      function final (state, action) {\n *          console.log('here', state, action);\n *          return state;\n *      }\n *\n * the last function should not call `next`.\n *\n * @ignore\n * @type {?}\n */\nconst compose = (/**\n * @param {?} funcs\n * @return {?}\n */\n(funcs) => (/**\n * @param {...?} args\n * @return {?}\n */\n(...args) => {\n    /** @type {?} */\n    const curr = (/** @type {?} */ (funcs.shift()));\n    return curr(...args, (/**\n     * @param {...?} nextArgs\n     * @return {?}\n     */\n    (...nextArgs) => compose(funcs)(...nextArgs)));\n}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * BehaviorSubject of the entire state.\n * @ignore\n */\nclass StateStream extends BehaviorSubject {\n    constructor() {\n        super({});\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // The `StateStream` should never emit values once the root view is removed, e.g. when the `NgModuleRef.destroy()` is called.\n        // This will eliminate memory leaks in server-side rendered apps where the `StateStream` is created per each HTTP request, users\n        // might forget to unsubscribe from `store.select` or `store.subscribe`, thus this will lead to huge memory leaks in SSR apps.\n        this.complete();\n    }\n}\nStateStream.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStateStream.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PluginManager {\n    /**\n     * @param {?} _parentManager\n     * @param {?} _pluginHandlers\n     */\n    constructor(_parentManager, _pluginHandlers) {\n        this._parentManager = _parentManager;\n        this._pluginHandlers = _pluginHandlers;\n        this.plugins = [];\n        this.registerHandlers();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get rootPlugins() {\n        return (this._parentManager && this._parentManager.plugins) || this.plugins;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    registerHandlers() {\n        /** @type {?} */\n        const pluginHandlers = this.getPluginHandlers();\n        this.rootPlugins.push(...pluginHandlers);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    getPluginHandlers() {\n        /** @type {?} */\n        const handlers = this._pluginHandlers || [];\n        return handlers.map((/**\n         * @param {?} plugin\n         * @return {?}\n         */\n        (plugin) => (/** @type {?} */ ((plugin.handle ? plugin.handle.bind(plugin) : plugin)))));\n    }\n}\nPluginManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nPluginManager.ctorParameters = () => [\n    { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    PluginManager.prototype.plugins;\n    /**\n     * @type {?}\n     * @private\n     */\n    PluginManager.prototype._parentManager;\n    /**\n     * @type {?}\n     * @private\n     */\n    PluginManager.prototype._pluginHandlers;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal Action result stream that is emitted when an action is completed.\n * This is used as a method of returning the action result to the dispatcher\n * for the observable returned by the dispatch(...) call.\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\n */\nclass InternalDispatchedActionResults extends Subject {\n}\nInternalDispatchedActionResults.decorators = [\n    { type: Injectable }\n];\nclass InternalDispatcher {\n    /**\n     * @param {?} _injector\n     * @param {?} _actions\n     * @param {?} _actionResults\n     * @param {?} _pluginManager\n     * @param {?} _stateStream\n     * @param {?} _ngxsExecutionStrategy\n     */\n    constructor(_injector, _actions, _actionResults, _pluginManager, _stateStream, _ngxsExecutionStrategy) {\n        this._injector = _injector;\n        this._actions = _actions;\n        this._actionResults = _actionResults;\n        this._pluginManager = _pluginManager;\n        this._stateStream = _stateStream;\n        this._ngxsExecutionStrategy = _ngxsExecutionStrategy;\n    }\n    /**\n     * Dispatches event(s).\n     * @param {?} actionOrActions\n     * @return {?}\n     */\n    dispatch(actionOrActions) {\n        /** @type {?} */\n        const result = this._ngxsExecutionStrategy.enter((/**\n         * @return {?}\n         */\n        () => this.dispatchByEvents(actionOrActions)));\n        result.subscribe({\n            error: (/**\n             * @param {?} error\n             * @return {?}\n             */\n            error => this._ngxsExecutionStrategy.leave((/**\n             * @return {?}\n             */\n            () => {\n                try {\n                    // Retrieve lazily to avoid cyclic dependency exception\n                    this._errorHandler = this._errorHandler || this._injector.get(ErrorHandler);\n                    this._errorHandler.handleError(error);\n                }\n                catch (_a) { }\n            })))\n        });\n        return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\n    }\n    /**\n     * @private\n     * @param {?} actionOrActions\n     * @return {?}\n     */\n    dispatchByEvents(actionOrActions) {\n        if (Array.isArray(actionOrActions)) {\n            if (actionOrActions.length === 0)\n                return of(this._stateStream.getValue());\n            return forkJoin(actionOrActions.map((/**\n             * @param {?} action\n             * @return {?}\n             */\n            action => this.dispatchSingle(action))));\n        }\n        else {\n            return this.dispatchSingle(actionOrActions);\n        }\n    }\n    /**\n     * @private\n     * @param {?} action\n     * @return {?}\n     */\n    dispatchSingle(action) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            /** @type {?} */\n            const type = getActionTypeFromInstance(action);\n            if (!type) {\n                /** @type {?} */\n                const error = new Error(`This action doesn't have a type property: ${action.constructor.name}`);\n                return throwError(error);\n            }\n        }\n        /** @type {?} */\n        const prevState = this._stateStream.getValue();\n        /** @type {?} */\n        const plugins = this._pluginManager.plugins;\n        return ((/** @type {?} */ (compose([\n            ...plugins,\n            (/**\n             * @param {?} nextState\n             * @param {?} nextAction\n             * @return {?}\n             */\n            (nextState, nextAction) => {\n                if (nextState !== prevState) {\n                    this._stateStream.next(nextState);\n                }\n                /** @type {?} */\n                const actionResult$ = this.getActionResultStream(nextAction);\n                actionResult$.subscribe((/**\n                 * @param {?} ctx\n                 * @return {?}\n                 */\n                ctx => this._actions.next(ctx)));\n                this._actions.next({ action: nextAction, status: \"DISPATCHED\" /* Dispatched */ });\n                return this.createDispatchObservable(actionResult$);\n            })\n        ])(prevState, action)))).pipe(shareReplay());\n    }\n    /**\n     * @private\n     * @param {?} action\n     * @return {?}\n     */\n    getActionResultStream(action) {\n        return this._actionResults.pipe(filter((/**\n         * @param {?} ctx\n         * @return {?}\n         */\n        (ctx) => ctx.action === action && ctx.status !== \"DISPATCHED\" /* Dispatched */)), take(1), shareReplay());\n    }\n    /**\n     * @private\n     * @param {?} actionResult$\n     * @return {?}\n     */\n    createDispatchObservable(actionResult$) {\n        return actionResult$\n            .pipe(exhaustMap((/**\n         * @param {?} ctx\n         * @return {?}\n         */\n        (ctx) => {\n            switch (ctx.status) {\n                case \"SUCCESSFUL\" /* Successful */:\n                    return of(this._stateStream.getValue());\n                case \"ERRORED\" /* Errored */:\n                    return throwError(ctx.error);\n                default:\n                    return EMPTY;\n            }\n        })))\n            .pipe(shareReplay());\n    }\n}\nInternalDispatcher.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nInternalDispatcher.ctorParameters = () => [\n    { type: Injector },\n    { type: InternalActions },\n    { type: InternalDispatchedActionResults },\n    { type: PluginManager },\n    { type: StateStream },\n    { type: InternalNgxsExecutionStrategy }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._errorHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._actions;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._actionResults;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._pluginManager;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._stateStream;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalDispatcher.prototype._ngxsExecutionStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object freeze code\n * https://github.com/jsdf/deep-freeze\n * @type {?}\n */\nconst deepFreeze = (/**\n * @param {?} o\n * @return {?}\n */\n(o) => {\n    Object.freeze(o);\n    /** @type {?} */\n    const oIsFunction = typeof o === 'function';\n    /** @type {?} */\n    const hasOwnProp = Object.prototype.hasOwnProperty;\n    Object.getOwnPropertyNames(o).forEach((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        if (hasOwnProp.call(o, prop) &&\n            (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\n            o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    }));\n    return o;\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * State Context factory class\n * @ignore\n */\nclass InternalStateOperations {\n    /**\n     * @param {?} _stateStream\n     * @param {?} _dispatcher\n     * @param {?} _config\n     */\n    constructor(_stateStream, _dispatcher, _config) {\n        this._stateStream = _stateStream;\n        this._dispatcher = _dispatcher;\n        this._config = _config;\n    }\n    /**\n     * Returns the root state operators.\n     * @return {?}\n     */\n    getRootStateOperations() {\n        /** @type {?} */\n        const rootStateOperations = {\n            getState: (/**\n             * @return {?}\n             */\n            () => this._stateStream.getValue()),\n            setState: (/**\n             * @param {?} newState\n             * @return {?}\n             */\n            (newState) => this._stateStream.next(newState)),\n            dispatch: (/**\n             * @param {?} actionOrActions\n             * @return {?}\n             */\n            (actionOrActions) => this._dispatcher.dispatch(actionOrActions))\n        };\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            return this._config.developmentMode\n                ? ensureStateAndActionsAreImmutable(rootStateOperations)\n                : rootStateOperations;\n        }\n        else {\n            return rootStateOperations;\n        }\n    }\n    /**\n     * @param {?} results\n     * @return {?}\n     */\n    setStateToTheCurrentWithNew(results) {\n        /** @type {?} */\n        const stateOperations = this.getRootStateOperations();\n        // Get our current stream\n        /** @type {?} */\n        const currentState = stateOperations.getState();\n        // Set the state to the current + new\n        stateOperations.setState(Object.assign({}, currentState, results.defaults));\n    }\n}\nInternalStateOperations.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nInternalStateOperations.ctorParameters = () => [\n    { type: StateStream },\n    { type: InternalDispatcher },\n    { type: NgxsConfig }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalStateOperations.prototype._stateStream;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalStateOperations.prototype._dispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    InternalStateOperations.prototype._config;\n}\n/**\n * @param {?} root\n * @return {?}\n */\nfunction ensureStateAndActionsAreImmutable(root) {\n    return {\n        getState: (/**\n         * @return {?}\n         */\n        () => root.getState()),\n        setState: (/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            /** @type {?} */\n            const frozenValue = deepFreeze(value);\n            return root.setState(frozenValue);\n        }),\n        dispatch: (/**\n         * @param {?} actions\n         * @return {?}\n         */\n        actions => {\n            return root.dispatch(actions);\n        })\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} val\n * @return {?}\n */\nfunction simplePatch(val) {\n    return (/**\n     * @param {?} existingState\n     * @return {?}\n     */\n    (existingState) => {\n        if (Array.isArray(val)) {\n            throwPatchingArrayError();\n        }\n        else if (typeof val !== 'object') {\n            throwPatchingPrimitiveError();\n        }\n        /** @type {?} */\n        const newState = Object.assign({}, ((/** @type {?} */ (existingState))));\n        for (const key in val) {\n            // deep clone for patch compatibility\n            // noinspection JSUnfilteredForInLoop (IDE)\n            newState[key] = ((/** @type {?} */ (val)))[key];\n        }\n        return (/** @type {?} */ (newState));\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * State Context factory class\n * @ignore\n */\nclass StateContextFactory {\n    /**\n     * @param {?} _internalStateOperations\n     */\n    constructor(_internalStateOperations) {\n        this._internalStateOperations = _internalStateOperations;\n    }\n    /**\n     * Create the state context\n     * @template T\n     * @param {?} mappedStore\n     * @return {?}\n     */\n    createStateContext(mappedStore) {\n        /** @type {?} */\n        const root = this._internalStateOperations.getRootStateOperations();\n        /**\n         * @param {?} currentAppState\n         * @return {?}\n         */\n        function getState(currentAppState) {\n            return getValue(currentAppState, mappedStore.path);\n        }\n        /**\n         * @param {?} currentAppState\n         * @param {?} newValue\n         * @return {?}\n         */\n        function setStateValue(currentAppState, newValue) {\n            /** @type {?} */\n            const newAppState = setValue(currentAppState, mappedStore.path, newValue);\n            /** @type {?} */\n            const instance = mappedStore.instance;\n            if (instance.ngxsOnChanges) {\n                /** @type {?} */\n                const change = getStateDiffChanges(mappedStore, {\n                    currentAppState,\n                    newAppState\n                });\n                instance.ngxsOnChanges(change);\n            }\n            root.setState(newAppState);\n            return newAppState;\n            // In doing this refactoring I noticed that there is a 'bug' where the\n            // application state is returned instead of this state slice.\n            // This has worked this way since the beginning see:\n            // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\n            // This needs to be fixed, but is a 'breaking' change.\n            // I will do this fix in a subsequent PR and we can decide how to handle it.\n        }\n        /**\n         * @param {?} currentAppState\n         * @param {?} stateOperator\n         * @return {?}\n         */\n        function setStateFromOperator(currentAppState, stateOperator) {\n            /** @type {?} */\n            const local = getState(currentAppState);\n            /** @type {?} */\n            const newValue = stateOperator(local);\n            return setStateValue(currentAppState, newValue);\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        function isStateOperator(value) {\n            return typeof value === 'function';\n        }\n        return {\n            /**\n             * @return {?}\n             */\n            getState() {\n                /** @type {?} */\n                const currentAppState = root.getState();\n                return getState(currentAppState);\n            },\n            /**\n             * @param {?} val\n             * @return {?}\n             */\n            patchState(val) {\n                /** @type {?} */\n                const currentAppState = root.getState();\n                /** @type {?} */\n                const patchOperator = simplePatch(val);\n                return setStateFromOperator(currentAppState, patchOperator);\n            },\n            /**\n             * @param {?} val\n             * @return {?}\n             */\n            setState(val) {\n                /** @type {?} */\n                const currentAppState = root.getState();\n                return isStateOperator(val)\n                    ? setStateFromOperator(currentAppState, val)\n                    : setStateValue(currentAppState, val);\n            },\n            /**\n             * @param {?} actions\n             * @return {?}\n             */\n            dispatch(actions) {\n                return root.dispatch(actions);\n            }\n        };\n    }\n}\nStateContextFactory.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStateContextFactory.ctorParameters = () => [\n    { type: InternalStateOperations }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StateContextFactory.prototype._internalStateOperations;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass StoreValidators {\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    static checkThatStateIsNamedCorrectly(name) {\n        if (!name) {\n            throwStateNamePropertyError();\n        }\n        else if (!this.stateNameRegex.test(name)) {\n            throwStateNameError(name);\n        }\n    }\n    /**\n     * @param {?} stateName\n     * @param {?} state\n     * @param {?} statesByName\n     * @return {?}\n     */\n    static checkThatStateNameIsUnique(stateName, state, statesByName) {\n        /** @type {?} */\n        const existingState = statesByName[stateName];\n        if (existingState && existingState !== state) {\n            throwStateUniqueError(stateName, state.name, existingState.name);\n        }\n    }\n    /**\n     * @param {?} stateClasses\n     * @return {?}\n     */\n    static checkThatStateClassesHaveBeenDecorated(stateClasses) {\n        stateClasses.forEach((/**\n         * @param {?} stateClass\n         * @return {?}\n         */\n        (stateClass) => {\n            if (!getStoreMetadata(stateClass)) {\n                throwStateDecoratorError(stateClass.name);\n            }\n        }));\n    }\n}\nStoreValidators.stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StoreValidators.stateNameRegex;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * All provided or injected tokens must have `\\@Injectable` decorator\n * (previously, injected tokens without `\\@Injectable` were allowed\n * if another decorator was used, e.g. pipes).\n * @param {?} stateClass\n * @return {?}\n */\nfunction ensureStateClassIsInjectable(stateClass) {\n    // `ɵprov` is a static property added by the NGCC compiler. It always exists in\n    // AOT mode because this property is added before runtime. If an application is running in\n    // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\n    // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\n    if (ɵivyEnabled) {\n        /** @type {?} */\n        /** @nocollapse */ const ngInjectableDef = stateClass.ɵprov;\n        if (!ngInjectableDef) {\n            // Don't warn if Ivy is disabled or `ɵprov` exists on the class\n            console.warn(getUndecoratedStateInIvyWarningMessage(stateClass.name));\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * State factory class\n * @ignore\n */\nclass StateFactory {\n    /**\n     * @param {?} _injector\n     * @param {?} _config\n     * @param {?} _parentFactory\n     * @param {?} _actions\n     * @param {?} _actionResults\n     * @param {?} _stateContextFactory\n     * @param {?} _initialState\n     */\n    constructor(_injector, _config, _parentFactory, _actions, _actionResults, _stateContextFactory, _initialState) {\n        this._injector = _injector;\n        this._config = _config;\n        this._parentFactory = _parentFactory;\n        this._actions = _actions;\n        this._actionResults = _actionResults;\n        this._stateContextFactory = _stateContextFactory;\n        this._initialState = _initialState;\n        this._actionsSubscription = null;\n        this._states = [];\n        this._statesByName = {};\n        this._statePaths = {};\n        this.getRuntimeSelectorContext = memoize((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const stateFactory = this;\n            /**\n             * @param {?} key\n             * @return {?}\n             */\n            function resolveGetter(key) {\n                /** @type {?} */\n                const path = stateFactory.statePaths[key];\n                return path ? propGetter(path.split('.'), stateFactory._config) : null;\n            }\n            /** @type {?} */\n            const context = this._parentFactory\n                ? this._parentFactory.getRuntimeSelectorContext()\n                : {\n                    /**\n                     * @param {?} key\n                     * @return {?}\n                     */\n                    getStateGetter(key) {\n                        /** @type {?} */\n                        let getter = resolveGetter(key);\n                        if (getter) {\n                            return getter;\n                        }\n                        return (/**\n                         * @param {...?} args\n                         * @return {?}\n                         */\n                        (...args) => {\n                            // Late loaded getter\n                            if (!getter) {\n                                getter = resolveGetter(key);\n                            }\n                            return getter ? getter(...args) : undefined;\n                        });\n                    },\n                    /**\n                     * @param {?=} localOptions\n                     * @return {?}\n                     */\n                    getSelectorOptions(localOptions) {\n                        /** @type {?} */\n                        const globalSelectorOptions = stateFactory._config.selectorOptions;\n                        return Object.assign({}, globalSelectorOptions, (localOptions || {}));\n                    }\n                };\n            return context;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get states() {\n        return this._parentFactory ? this._parentFactory.states : this._states;\n    }\n    /**\n     * @return {?}\n     */\n    get statesByName() {\n        return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    get statePaths() {\n        return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\n    }\n    /**\n     * @private\n     * @param {?} defaults\n     * @return {?}\n     */\n    static cloneDefaults(defaults) {\n        /** @type {?} */\n        let value = {};\n        if (Array.isArray(defaults)) {\n            value = defaults.slice();\n        }\n        else if (isObject$1(defaults)) {\n            value = Object.assign({}, defaults);\n        }\n        else if (defaults === undefined) {\n            value = {};\n        }\n        else {\n            value = defaults;\n        }\n        return value;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // I'm using non-null assertion here since `_actionsSubscrition` will\n        // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\n        // on the `StateFactory` until its initialized :) An it's initialized\n        // for the first time along with the `NgxsRootModule`.\n        (/** @type {?} */ (this._actionsSubscription)).unsubscribe();\n    }\n    /**\n     * Add a new state to the global defs.\n     * @param {?} stateClasses\n     * @return {?}\n     */\n    add(stateClasses) {\n        // Caretaker note: we have still left the `typeof` condition in order to avoid\n        // creating a breaking change for projects that still use the View Engine.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            StoreValidators.checkThatStateClassesHaveBeenDecorated(stateClasses);\n        }\n        const { newStates } = this.addToStatesMap(stateClasses);\n        if (!newStates.length)\n            return [];\n        /** @type {?} */\n        const stateGraph = buildGraph(newStates);\n        /** @type {?} */\n        const sortedStates = topologicalSort(stateGraph);\n        /** @type {?} */\n        const paths = findFullParentPath(stateGraph);\n        /** @type {?} */\n        const nameGraph = nameToState(newStates);\n        /** @type {?} */\n        const bootstrappedStores = [];\n        for (const name of sortedStates) {\n            /** @type {?} */\n            const stateClass = nameGraph[name];\n            /** @type {?} */\n            const path = paths[name];\n            /** @type {?} */\n            const meta = (/** @type {?} */ (stateClass[META_KEY]));\n            this.addRuntimeInfoToMeta(meta, path);\n            // Note: previously we called `ensureStateClassIsInjectable` within the\n            // `State` decorator. This check is moved here because the `ɵprov` property\n            // will not exist on the class in JIT mode (because it's set asynchronously\n            // during JIT compilation through `Object.defineProperty`).\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                ensureStateClassIsInjectable(stateClass);\n            }\n            /** @type {?} */\n            const stateMap = {\n                name,\n                path,\n                isInitialised: false,\n                actions: meta.actions,\n                instance: this._injector.get(stateClass),\n                defaults: StateFactory.cloneDefaults(meta.defaults)\n            };\n            // ensure our store hasn't already been added\n            // but don't throw since it could be lazy\n            // loaded from different paths\n            if (!this.hasBeenMountedAndBootstrapped(name, path)) {\n                bootstrappedStores.push(stateMap);\n            }\n            this.states.push(stateMap);\n        }\n        return bootstrappedStores;\n    }\n    /**\n     * Add a set of states to the store and return the defaults\n     * @param {?} stateClasses\n     * @return {?}\n     */\n    addAndReturnDefaults(stateClasses) {\n        /** @type {?} */\n        const classes = stateClasses || [];\n        /** @type {?} */\n        const mappedStores = this.add(classes);\n        /** @type {?} */\n        const defaults = mappedStores.reduce((/**\n         * @param {?} result\n         * @param {?} mappedStore\n         * @return {?}\n         */\n        (result, mappedStore) => setValue(result, mappedStore.path, mappedStore.defaults)), {});\n        return { defaults, states: mappedStores };\n    }\n    /**\n     * Bind the actions to the handlers\n     * @return {?}\n     */\n    connectActionHandlers() {\n        if (this._actionsSubscription !== null)\n            return;\n        /** @type {?} */\n        const dispatched$ = new Subject();\n        this._actionsSubscription = this._actions\n            .pipe(filter((/**\n         * @param {?} ctx\n         * @return {?}\n         */\n        (ctx) => ctx.status === \"DISPATCHED\" /* Dispatched */)), mergeMap((/**\n         * @param {?} ctx\n         * @return {?}\n         */\n        ctx => {\n            dispatched$.next(ctx);\n            /** @type {?} */\n            const action = ctx.action;\n            return this.invokeActions(dispatched$, (/** @type {?} */ (action))).pipe(map((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ ({ action, status: \"SUCCESSFUL\" /* Successful */ })))), defaultIfEmpty((/** @type {?} */ ({ action, status: \"CANCELED\" /* Canceled */ }))), catchError((/**\n             * @param {?} error\n             * @return {?}\n             */\n            error => of((/** @type {?} */ ({ action, status: \"ERRORED\" /* Errored */, error }))))));\n        })))\n            .subscribe((/**\n         * @param {?} ctx\n         * @return {?}\n         */\n        ctx => this._actionResults.next(ctx)));\n    }\n    /**\n     * Invoke actions on the states.\n     * @param {?} dispatched$\n     * @param {?} action\n     * @return {?}\n     */\n    invokeActions(dispatched$, action) {\n        /** @type {?} */\n        const type = (/** @type {?} */ (getActionTypeFromInstance(action)));\n        /** @type {?} */\n        const results = [];\n        for (const metadata of this.states) {\n            /** @type {?} */\n            const actionMetas = metadata.actions[type];\n            if (actionMetas) {\n                for (const actionMeta of actionMetas) {\n                    /** @type {?} */\n                    const stateContext = this._stateContextFactory.createStateContext(metadata);\n                    try {\n                        /** @type {?} */\n                        let result = metadata.instance[actionMeta.fn](stateContext, action);\n                        if (result instanceof Promise) {\n                            result = from(result);\n                        }\n                        if (result instanceof Observable) {\n                            // If this observable has been completed w/o emitting\n                            // any value then we wouldn't want to complete the whole chain\n                            // of actions. Since if any observable completes then\n                            // action will be canceled.\n                            // For instance if any action handler would've had such statement:\n                            // `handler(ctx) { return EMPTY; }`\n                            // then the action will be canceled.\n                            // See https://github.com/ngxs/store/issues/1568\n                            result = result.pipe(mergeMap((/**\n                             * @param {?} value\n                             * @return {?}\n                             */\n                            (value) => {\n                                if (value instanceof Promise) {\n                                    return from(value);\n                                }\n                                if (value instanceof Observable) {\n                                    return value;\n                                }\n                                return of(value);\n                            })), defaultIfEmpty({}));\n                            if (actionMeta.options.cancelUncompleted) {\n                                // todo: ofActionDispatched should be used with action class\n                                result = result.pipe(takeUntil(dispatched$.pipe(ofActionDispatched((/** @type {?} */ (action))))));\n                            }\n                        }\n                        else {\n                            result = of({}).pipe(shareReplay());\n                        }\n                        results.push(result);\n                    }\n                    catch (e) {\n                        results.push(throwError(e));\n                    }\n                }\n            }\n        }\n        if (!results.length) {\n            results.push(of({}));\n        }\n        return forkJoin(results);\n    }\n    /**\n     * @private\n     * @param {?} stateClasses\n     * @return {?}\n     */\n    addToStatesMap(stateClasses) {\n        /** @type {?} */\n        const newStates = [];\n        /** @type {?} */\n        const statesMap = this.statesByName;\n        for (const stateClass of stateClasses) {\n            /** @type {?} */\n            const stateName = (/** @type {?} */ (getStoreMetadata(stateClass).name));\n            // Caretaker note: we have still left the `typeof` condition in order to avoid\n            // creating a breaking change for projects that still use the View Engine.\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                StoreValidators.checkThatStateNameIsUnique(stateName, stateClass, statesMap);\n            }\n            /** @type {?} */\n            const unmountedState = !statesMap[stateName];\n            if (unmountedState) {\n                newStates.push(stateClass);\n                statesMap[stateName] = stateClass;\n            }\n        }\n        return { newStates };\n    }\n    /**\n     * @private\n     * @param {?} meta\n     * @param {?} path\n     * @return {?}\n     */\n    addRuntimeInfoToMeta(meta, path) {\n        this.statePaths[(/** @type {?} */ (meta.name))] = path;\n        // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\n        // we can do this when we get rid of the incorrectly exposed getStoreMetadata\n        // We will need to come up with an alternative in v4 because this is used by many plugins\n        meta.path = path;\n    }\n    /**\n     * \\@description\n     * the method checks if the state has already been added to the tree\n     * and completed the life cycle\n     * @private\n     * @param {?} name\n     * @param {?} path\n     * @return {?}\n     */\n    hasBeenMountedAndBootstrapped(name, path) {\n        /** @type {?} */\n        const valueIsBootstrappedInInitialState = getValue(this._initialState, path) !== undefined;\n        return this.statesByName[name] && valueIsBootstrappedInInitialState;\n    }\n}\nStateFactory.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStateFactory.ctorParameters = () => [\n    { type: Injector },\n    { type: NgxsConfig },\n    { type: StateFactory, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: InternalActions },\n    { type: InternalDispatchedActionResults },\n    { type: StateContextFactory },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INITIAL_STATE_TOKEN,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._actionsSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._states;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._statesByName;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._statePaths;\n    /** @type {?} */\n    StateFactory.prototype.getRuntimeSelectorContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._parentFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._actions;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._actionResults;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._stateContextFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    StateFactory.prototype._initialState;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LifecycleStateManager {\n    /**\n     * @param {?} internalStateOperations\n     * @param {?} stateContextFactory\n     * @param {?} bootstrapper\n     */\n    constructor(internalStateOperations, stateContextFactory, bootstrapper) {\n        this.internalStateOperations = internalStateOperations;\n        this.stateContextFactory = stateContextFactory;\n        this.bootstrapper = bootstrapper;\n    }\n    /**\n     * @template T\n     * @param {?} action\n     * @param {?} results\n     * @return {?}\n     */\n    ngxsBootstrap(action, results) {\n        this.internalStateOperations\n            .getRootStateOperations()\n            .dispatch(action)\n            .pipe(filter((/**\n         * @return {?}\n         */\n        () => !!results)), tap((/**\n         * @return {?}\n         */\n        () => this.invokeInit((/** @type {?} */ (results)).states))), mergeMap((/**\n         * @return {?}\n         */\n        () => this.bootstrapper.appBootstrapped$)), filter((/**\n         * @param {?} appBootstrapped\n         * @return {?}\n         */\n        appBootstrapped => !!appBootstrapped)))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.invokeBootstrap((/** @type {?} */ (results)).states)));\n    }\n    /**\n     * Invoke the init function on the states.\n     * @param {?} mappedStores\n     * @return {?}\n     */\n    invokeInit(mappedStores) {\n        for (const mappedStore of mappedStores) {\n            /** @type {?} */\n            const instance = mappedStore.instance;\n            if (instance.ngxsOnChanges) {\n                /** @type {?} */\n                const currentAppState = {};\n                /** @type {?} */\n                const newAppState = this.internalStateOperations\n                    .getRootStateOperations()\n                    .getState();\n                /** @type {?} */\n                const firstDiffChange = getStateDiffChanges(mappedStore, {\n                    currentAppState,\n                    newAppState\n                });\n                instance.ngxsOnChanges(firstDiffChange);\n            }\n            if (instance.ngxsOnInit) {\n                instance.ngxsOnInit(this.getStateContext(mappedStore));\n            }\n            mappedStore.isInitialised = true;\n        }\n    }\n    /**\n     * Invoke the bootstrap function on the states.\n     * @param {?} mappedStores\n     * @return {?}\n     */\n    invokeBootstrap(mappedStores) {\n        for (const mappedStore of mappedStores) {\n            /** @type {?} */\n            const instance = mappedStore.instance;\n            if (instance.ngxsAfterBootstrap) {\n                instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {?} mappedStore\n     * @return {?}\n     */\n    getStateContext(mappedStore) {\n        return this.stateContextFactory.createStateContext(mappedStore);\n    }\n}\nLifecycleStateManager.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nLifecycleStateManager.ctorParameters = () => [\n    { type: InternalStateOperations },\n    { type: StateContextFactory },\n    { type: NgxsBootstrapper }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    LifecycleStateManager.prototype.internalStateOperations;\n    /**\n     * @type {?}\n     * @private\n     */\n    LifecycleStateManager.prototype.stateContextFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    LifecycleStateManager.prototype.bootstrapper;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\n/** @type {?} */\nconst selectorOptionsMetaAccessor = {\n    getOptions: (/**\n     * @param {?} target\n     * @return {?}\n     */\n    (target) => {\n        return (target && ((/** @type {?} */ (target)))[SELECTOR_OPTIONS_META_KEY]) || {};\n    }),\n    defineOptions: (/**\n     * @param {?} target\n     * @param {?} options\n     * @return {?}\n     */\n    (target, options) => {\n        if (!target)\n            return;\n        ((/** @type {?} */ (target)))[SELECTOR_OPTIONS_META_KEY] = options;\n    })\n};\n/**\n * @record\n */\nfunction CreationMetadata() { }\nif (false) {\n    /** @type {?} */\n    CreationMetadata.prototype.containerClass;\n    /** @type {?} */\n    CreationMetadata.prototype.selectorName;\n    /** @type {?|undefined} */\n    CreationMetadata.prototype.getSelectorOptions;\n}\n/**\n * @record\n */\nfunction RuntimeSelectorInfo() { }\nif (false) {\n    /** @type {?} */\n    RuntimeSelectorInfo.prototype.selectorOptions;\n    /** @type {?} */\n    RuntimeSelectorInfo.prototype.argumentSelectorFunctions;\n}\n/**\n * Function for creating a selector\n * @template T\n * @param {?} selectors The selectors to use to create the arguments of this function\n * @param {?} originalFn The original function being made into a selector\n * @param {?=} creationMetadata\n * @return {?}\n */\nfunction createSelector(selectors, originalFn, creationMetadata) {\n    /** @type {?} */\n    const containerClass = creationMetadata && creationMetadata.containerClass;\n    /** @type {?} */\n    const wrappedFn = (/** @type {?} */ ((/**\n     * @param {...?} args\n     * @return {?}\n     */\n    function wrappedSelectorFn(...args) {\n        /** @type {?} */\n        const returnValue = originalFn.apply(containerClass, args);\n        if (returnValue instanceof Function) {\n            /** @type {?} */\n            const innerMemoizedFn = memoize.apply(null, [returnValue]);\n            return innerMemoizedFn;\n        }\n        return returnValue;\n    })));\n    /** @type {?} */\n    const memoizedFn = memoize(wrappedFn);\n    Object.setPrototypeOf(memoizedFn, originalFn);\n    /** @type {?} */\n    const selectorMetaData = setupSelectorMetadata(originalFn, creationMetadata);\n    /** @type {?} */\n    const makeRootSelector = (/**\n     * @param {?} context\n     * @return {?}\n     */\n    (context) => {\n        const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(context, selectorMetaData, selectors);\n        return (/**\n         * @param {?} rootState\n         * @return {?}\n         */\n        function selectFromRoot(rootState) {\n            // Determine arguments from the app state using the selectors\n            /** @type {?} */\n            const results = argumentSelectorFunctions.map((/**\n             * @param {?} argFn\n             * @return {?}\n             */\n            argFn => argFn(rootState)));\n            // if the lambda tries to access a something on the\n            // state that doesn't exist, it will throw a TypeError.\n            // since this is quite usual behaviour, we simply return undefined if so.\n            try {\n                return memoizedFn(...results);\n            }\n            catch (ex) {\n                if (ex instanceof TypeError && selectorOptions.suppressErrors) {\n                    return undefined;\n                }\n                throw ex;\n            }\n        });\n    });\n    selectorMetaData.makeRootSelector = makeRootSelector;\n    return memoizedFn;\n}\n/**\n * @template T\n * @param {?} originalFn\n * @param {?} creationMetadata\n * @return {?}\n */\nfunction setupSelectorMetadata(originalFn, creationMetadata) {\n    /** @type {?} */\n    const selectorMetaData = ensureSelectorMetadata(originalFn);\n    selectorMetaData.originalFn = originalFn;\n    /** @type {?} */\n    let getExplicitSelectorOptions = (/**\n     * @return {?}\n     */\n    () => ({}));\n    if (creationMetadata) {\n        selectorMetaData.containerClass = creationMetadata.containerClass;\n        selectorMetaData.selectorName = creationMetadata.selectorName;\n        getExplicitSelectorOptions =\n            creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\n    }\n    /** @type {?} */\n    const selectorMetaDataClone = Object.assign({}, selectorMetaData);\n    selectorMetaData.getSelectorOptions = (/**\n     * @return {?}\n     */\n    () => getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions()));\n    return selectorMetaData;\n}\n/**\n * @param {?} context\n * @param {?} selectorMetaData\n * @param {?=} selectors\n * @return {?}\n */\nfunction getRuntimeSelectorInfo(context, selectorMetaData, selectors = []) {\n    /** @type {?} */\n    const localSelectorOptions = selectorMetaData.getSelectorOptions();\n    /** @type {?} */\n    const selectorOptions = context.getSelectorOptions(localSelectorOptions);\n    /** @type {?} */\n    const selectorsToApply = getSelectorsToApply(selectors, selectorOptions, selectorMetaData.containerClass);\n    /** @type {?} */\n    const argumentSelectorFunctions = selectorsToApply.map((/**\n     * @param {?} selector\n     * @return {?}\n     */\n    selector => {\n        /** @type {?} */\n        const factory = getRootSelectorFactory(selector);\n        return factory(context);\n    }));\n    return {\n        selectorOptions,\n        argumentSelectorFunctions\n    };\n}\n/**\n * @param {?} selectorMetaData\n * @param {?} explicitOptions\n * @return {?}\n */\nfunction getLocalSelectorOptions(selectorMetaData, explicitOptions) {\n    return Object.assign({}, (selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}), (selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}), (selectorMetaData.getSelectorOptions() || {}), explicitOptions);\n}\n/**\n * @param {?=} selectors\n * @param {?=} selectorOptions\n * @param {?=} containerClass\n * @return {?}\n */\nfunction getSelectorsToApply(selectors = [], selectorOptions, containerClass) {\n    /** @type {?} */\n    const selectorsToApply = [];\n    /** @type {?} */\n    const canInjectContainerState = selectors.length === 0 || selectorOptions.injectContainerState;\n    if (containerClass && canInjectContainerState) {\n        // If we are on a state class, add it as the first selector parameter\n        /** @type {?} */\n        const metadata = getStoreMetadata(containerClass);\n        if (metadata) {\n            selectorsToApply.push(containerClass);\n        }\n    }\n    if (selectors) {\n        selectorsToApply.push(...selectors);\n    }\n    return selectorsToApply;\n}\n/**\n * This function gets the factory function to create the selector to get the selected slice from the app state\n * @ignore\n * @param {?} selector\n * @return {?}\n */\nfunction getRootSelectorFactory(selector) {\n    /** @type {?} */\n    const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\n    return (metadata && metadata.makeRootSelector) || ((/**\n     * @return {?}\n     */\n    () => selector));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Store {\n    /**\n     * @param {?} _stateStream\n     * @param {?} _internalStateOperations\n     * @param {?} _config\n     * @param {?} _internalExecutionStrategy\n     * @param {?} _stateFactory\n     * @param {?} initialStateValue\n     */\n    constructor(_stateStream, _internalStateOperations, _config, _internalExecutionStrategy, _stateFactory, initialStateValue) {\n        this._stateStream = _stateStream;\n        this._internalStateOperations = _internalStateOperations;\n        this._config = _config;\n        this._internalExecutionStrategy = _internalExecutionStrategy;\n        this._stateFactory = _stateFactory;\n        /**\n         * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\n         * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\n         * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\n         */\n        this._selectableStateStream = this._stateStream.pipe(observeOn(queueScheduler), leaveNgxs(this._internalExecutionStrategy), shareReplay({ bufferSize: 1, refCount: true }));\n        this.initStateStream(initialStateValue);\n    }\n    /**\n     * Dispatches event(s).\n     * @param {?} actionOrActions\n     * @return {?}\n     */\n    dispatch(actionOrActions) {\n        return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    select(selector) {\n        /** @type {?} */\n        const selectorFn = this.getStoreBoundSelectorFn(selector);\n        return this._selectableStateStream.pipe(map(selectorFn), catchError((/**\n         * @param {?} err\n         * @return {?}\n         */\n        (err) => {\n            // if error is TypeError we swallow it to prevent usual errors with property access\n            const { suppressErrors } = this._config.selectorOptions;\n            if (err instanceof TypeError && suppressErrors) {\n                return of(undefined);\n            }\n            // rethrow other errors\n            return throwError(err);\n        })), distinctUntilChanged(), leaveNgxs(this._internalExecutionStrategy));\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    selectOnce(selector) {\n        return this.select(selector).pipe(take(1));\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    selectSnapshot(selector) {\n        /** @type {?} */\n        const selectorFn = this.getStoreBoundSelectorFn(selector);\n        return selectorFn(this._stateStream.getValue());\n    }\n    /**\n     * Allow the user to subscribe to the root of the state\n     * @param {?=} fn\n     * @return {?}\n     */\n    subscribe(fn) {\n        return this._selectableStateStream\n            .pipe(leaveNgxs(this._internalExecutionStrategy))\n            .subscribe(fn);\n    }\n    /**\n     * Return the raw value of the state.\n     * @return {?}\n     */\n    snapshot() {\n        return this._internalStateOperations.getRootStateOperations().getState();\n    }\n    /**\n     * Reset the state to a specific point in time. This method is useful\n     * for plugin's who need to modify the state directly or unit testing.\n     * @param {?} state\n     * @return {?}\n     */\n    reset(state) {\n        return this._internalStateOperations.getRootStateOperations().setState(state);\n    }\n    /**\n     * @private\n     * @param {?} selector\n     * @return {?}\n     */\n    getStoreBoundSelectorFn(selector) {\n        /** @type {?} */\n        const makeSelectorFn = getRootSelectorFactory(selector);\n        /** @type {?} */\n        const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\n        return makeSelectorFn(runtimeContext);\n    }\n    /**\n     * @private\n     * @param {?} initialStateValue\n     * @return {?}\n     */\n    initStateStream(initialStateValue) {\n        /** @type {?} */\n        const value = this._stateStream.value;\n        /** @type {?} */\n        const storeIsEmpty = !value || Object.keys(value).length === 0;\n        if (storeIsEmpty) {\n            /** @type {?} */\n            const defaultStateNotEmpty = Object.keys(this._config.defaultsState).length > 0;\n            /** @type {?} */\n            const storeValues = defaultStateNotEmpty\n                ? Object.assign({}, this._config.defaultsState, initialStateValue) : initialStateValue;\n            this._stateStream.next(storeValues);\n        }\n    }\n}\nStore.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nStore.ctorParameters = () => [\n    { type: StateStream },\n    { type: InternalStateOperations },\n    { type: NgxsConfig },\n    { type: InternalNgxsExecutionStrategy },\n    { type: StateFactory },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INITIAL_STATE_TOKEN,] }] }\n];\nif (false) {\n    /**\n     * This is a derived state stream that leaves NGXS execution strategy to emit state changes within the Angular zone,\n     * because state is being changed actually within the `<root>` zone, see `InternalDispatcher#dispatchSingle`.\n     * All selects would use this stream, and it would call leave only once for any state change across all active selectors.\n     * @type {?}\n     * @private\n     */\n    Store.prototype._selectableStateStream;\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype._stateStream;\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype._internalStateOperations;\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype._internalExecutionStrategy;\n    /**\n     * @type {?}\n     * @private\n     */\n    Store.prototype._stateFactory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Allows the select decorator to get access to the DI store, this is used internally\n * in `\\@Select` decorator.\n */\nclass SelectFactory {\n    /**\n     * @param {?} store\n     * @param {?} config\n     */\n    constructor(store, config) {\n        SelectFactory.store = store;\n        SelectFactory.config = config;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        SelectFactory.store = null;\n        SelectFactory.config = null;\n    }\n}\nSelectFactory.store = null;\nSelectFactory.config = null;\nSelectFactory.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nSelectFactory.ctorParameters = () => [\n    { type: Store },\n    { type: NgxsConfig }\n];\nif (false) {\n    /** @type {?} */\n    SelectFactory.store;\n    /** @type {?} */\n    SelectFactory.config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Init action\n */\nclass InitState {\n    /**\n     * @return {?}\n     */\n    static get type() {\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n        return '@@INIT';\n    }\n}\n/**\n * Update action\n */\nclass UpdateState {\n    /**\n     * @param {?=} addedStates\n     */\n    constructor(addedStates) {\n        this.addedStates = addedStates;\n    }\n    /**\n     * @return {?}\n     */\n    static get type() {\n        // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\n        return '@@UPDATE_STATE';\n    }\n}\nif (false) {\n    /** @type {?} */\n    UpdateState.prototype.addedStates;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Root module\n * @ignore\n */\nclass NgxsRootModule {\n    /**\n     * @param {?} factory\n     * @param {?} internalStateOperations\n     * @param {?} _store\n     * @param {?} _select\n     * @param {?=} states\n     * @param {?=} lifecycleStateManager\n     */\n    constructor(factory, internalStateOperations, _store, _select, states = [], lifecycleStateManager) {\n        // Add stores to the state graph and return their defaults\n        /** @type {?} */\n        const results = factory.addAndReturnDefaults(states);\n        internalStateOperations.setStateToTheCurrentWithNew(results);\n        // Connect our actions stream\n        factory.connectActionHandlers();\n        // Dispatch the init action and invoke init and bootstrap functions after\n        lifecycleStateManager.ngxsBootstrap(new InitState(), results);\n    }\n}\nNgxsRootModule.decorators = [\n    { type: NgModule }\n];\n/** @nocollapse */\nNgxsRootModule.ctorParameters = () => [\n    { type: StateFactory },\n    { type: InternalStateOperations },\n    { type: Store },\n    { type: SelectFactory },\n    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [ROOT_STATE_TOKEN,] }] },\n    { type: LifecycleStateManager }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Feature module\n * @ignore\n */\nclass NgxsFeatureModule {\n    /**\n     * @param {?} _store\n     * @param {?} internalStateOperations\n     * @param {?} factory\n     * @param {?=} states\n     * @param {?=} lifecycleStateManager\n     */\n    constructor(_store, internalStateOperations, factory, states = [], lifecycleStateManager) {\n        // Since FEATURE_STATE_TOKEN is a multi token, we need to\n        // flatten it [[Feature1State, Feature2State], [Feature3State]]\n        /** @type {?} */\n        const flattenedStates = NgxsFeatureModule.flattenStates(states);\n        // add stores to the state graph and return their defaults\n        /** @type {?} */\n        const results = factory.addAndReturnDefaults(flattenedStates);\n        if (results.states.length) {\n            internalStateOperations.setStateToTheCurrentWithNew(results);\n            // dispatch the update action and invoke init and bootstrap functions after\n            lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\n        }\n    }\n    /**\n     * @private\n     * @param {?=} states\n     * @return {?}\n     */\n    static flattenStates(states = []) {\n        return states.reduce((/**\n         * @param {?} total\n         * @param {?} values\n         * @return {?}\n         */\n        (total, values) => total.concat(values)), []);\n    }\n}\nNgxsFeatureModule.decorators = [\n    { type: NgModule }\n];\n/** @nocollapse */\nNgxsFeatureModule.ctorParameters = () => [\n    { type: Store },\n    { type: InternalStateOperations },\n    { type: StateFactory },\n    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FEATURE_STATE_TOKEN,] }] },\n    { type: LifecycleStateManager }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Ngxs Module\n */\nclass NgxsModule {\n    /**\n     * Root module factory\n     * @param {?=} states\n     * @param {?=} options\n     * @return {?}\n     */\n    static forRoot(states = [], options = {}) {\n        return {\n            ngModule: NgxsRootModule,\n            providers: [\n                StateFactory,\n                StateContextFactory,\n                Actions,\n                InternalActions,\n                NgxsBootstrapper,\n                LifecycleStateManager,\n                InternalDispatcher,\n                InternalDispatchedActionResults,\n                InternalStateOperations,\n                InternalNgxsExecutionStrategy,\n                Store,\n                StateStream,\n                SelectFactory,\n                PluginManager,\n                ...states,\n                ...NgxsModule.ngxsTokenProviders(states, options)\n            ]\n        };\n    }\n    /**\n     * Feature module factory\n     * @param {?=} states\n     * @return {?}\n     */\n    static forFeature(states = []) {\n        return {\n            ngModule: NgxsFeatureModule,\n            providers: [\n                StateFactory,\n                PluginManager,\n                ...states,\n                {\n                    provide: FEATURE_STATE_TOKEN,\n                    multi: true,\n                    useValue: states\n                }\n            ]\n        };\n    }\n    /**\n     * @private\n     * @param {?} states\n     * @param {?} options\n     * @return {?}\n     */\n    static ngxsTokenProviders(states, options) {\n        return [\n            {\n                provide: USER_PROVIDED_NGXS_EXECUTION_STRATEGY,\n                useValue: options.executionStrategy\n            },\n            {\n                provide: ROOT_STATE_TOKEN,\n                useValue: states\n            },\n            {\n                provide: NgxsModule.ROOT_OPTIONS,\n                useValue: options\n            },\n            {\n                provide: NgxsConfig,\n                useFactory: NgxsModule.ngxsConfigFactory,\n                deps: [NgxsModule.ROOT_OPTIONS]\n            },\n            {\n                provide: APP_BOOTSTRAP_LISTENER,\n                useFactory: NgxsModule.appBootstrapListenerFactory,\n                multi: true,\n                deps: [NgxsBootstrapper]\n            },\n            {\n                provide: INITIAL_STATE_TOKEN,\n                useFactory: NgxsModule.getInitialState\n            },\n            {\n                provide: NGXS_STATE_CONTEXT_FACTORY,\n                useExisting: StateContextFactory\n            },\n            {\n                provide: NGXS_STATE_FACTORY,\n                useExisting: StateFactory\n            }\n        ];\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    static ngxsConfigFactory(options) {\n        return mergeDeep(new NgxsConfig(), options);\n    }\n    /**\n     * @private\n     * @param {?} bootstrapper\n     * @return {?}\n     */\n    static appBootstrapListenerFactory(bootstrapper) {\n        return (/**\n         * @return {?}\n         */\n        () => bootstrapper.bootstrap());\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    static getInitialState() {\n        return InitialState.pop();\n    }\n}\nNgxsModule.ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');\nNgxsModule.decorators = [\n    { type: NgModule }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgxsModule.ROOT_OPTIONS;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Decorates a method with a action information.\n * @param {?} actions\n * @param {?=} options\n * @return {?}\n */\nfunction Action(actions, options) {\n    return (/**\n     * @param {?} target\n     * @param {?} name\n     * @return {?}\n     */\n    (target, name) => {\n        // Caretaker note: we have still left the `typeof` condition in order to avoid\n        // creating a breaking change for projects that still use the View Engine.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            /** @type {?} */\n            const isStaticMethod = target.hasOwnProperty('prototype');\n            if (isStaticMethod) {\n                throwActionDecoratorError();\n            }\n        }\n        /** @type {?} */\n        const meta = ensureStoreMetadata(target.constructor);\n        if (!Array.isArray(actions)) {\n            actions = [actions];\n        }\n        for (const action of actions) {\n            /** @type {?} */\n            const type = action.type;\n            if (!meta.actions[type]) {\n                meta.actions[type] = [];\n            }\n            meta.actions[type].push({\n                fn: name,\n                options: options || {},\n                type\n            });\n        }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nfunction MutateMetaOptions() { }\nif (false) {\n    /** @type {?} */\n    MutateMetaOptions.prototype.meta;\n    /** @type {?} */\n    MutateMetaOptions.prototype.inheritedStateClass;\n    /** @type {?} */\n    MutateMetaOptions.prototype.optionsWithInheritance;\n}\n/**\n * Decorates a class with ngxs state information.\n * @template T\n * @param {?} options\n * @return {?}\n */\nfunction State(options) {\n    /**\n     * @param {?} inheritedStateClass\n     * @return {?}\n     */\n    function getStateOptions(inheritedStateClass) {\n        /** @type {?} */\n        const inheritanceOptions = inheritedStateClass[META_OPTIONS_KEY] || {};\n        return (/** @type {?} */ (Object.assign({}, inheritanceOptions, options)));\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    function mutateMetaData(params) {\n        const { meta, inheritedStateClass, optionsWithInheritance } = params;\n        const { children, defaults, name } = optionsWithInheritance;\n        /** @type {?} */\n        const stateName = typeof name === 'string' ? name : (name && name.getName()) || null;\n        // Caretaker note: we have still left the `typeof` condition in order to avoid\n        // creating a breaking change for projects that still use the View Engine.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            StoreValidators.checkThatStateIsNamedCorrectly(stateName);\n        }\n        if (inheritedStateClass.hasOwnProperty(META_KEY)) {\n            /** @type {?} */\n            const inheritedMeta = inheritedStateClass[META_KEY] || {};\n            meta.actions = Object.assign({}, meta.actions, inheritedMeta.actions);\n        }\n        meta.children = children;\n        meta.defaults = defaults;\n        meta.name = stateName;\n    }\n    return (/**\n     * @param {?} target\n     * @return {?}\n     */\n    (target) => {\n        /** @type {?} */\n        const stateClass = target;\n        /** @type {?} */\n        const meta = ensureStoreMetadata(stateClass);\n        /** @type {?} */\n        const inheritedStateClass = Object.getPrototypeOf(stateClass);\n        /** @type {?} */\n        const optionsWithInheritance = getStateOptions(inheritedStateClass);\n        mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\n        stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DOLLAR_CHAR_CODE = 36;\n/**\n * @template T\n * @param {?} selector\n * @return {?}\n */\nfunction createSelectObservable(selector) {\n    if (!SelectFactory.store) {\n        throwSelectFactoryNotConnectedError();\n    }\n    return (/** @type {?} */ (SelectFactory.store)).select(selector);\n}\n/**\n * @param {?} name\n * @param {?=} rawSelector\n * @param {?=} paths\n * @return {?}\n */\nfunction createSelectorFn(name, rawSelector, paths = []) {\n    rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\n    if (typeof rawSelector === 'string') {\n        /** @type {?} */\n        const propsArray = paths.length\n            ? [rawSelector, ...paths]\n            : rawSelector.split('.');\n        return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));\n    }\n    return rawSelector;\n}\n/**\n * \\@example If `foo$` => make it just `foo`\n * @param {?} name\n * @return {?}\n */\nfunction removeDollarAtTheEnd(name) {\n    /** @type {?} */\n    const lastCharIndex = name.length - 1;\n    /** @type {?} */\n    const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\n    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Decorator for selecting a slice of state from the store.\n * @template T\n * @param {?=} rawSelector\n * @param {...?} paths\n * @return {?}\n */\nfunction Select(rawSelector, ...paths) {\n    return (/**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    function (target, key) {\n        /** @type {?} */\n        const name = key.toString();\n        /** @type {?} */\n        const selectorId = `__${name}__selector`;\n        /** @type {?} */\n        const selector = createSelectorFn(name, rawSelector, paths);\n        Object.defineProperties(target, {\n            [selectorId]: {\n                writable: true,\n                enumerable: false,\n                configurable: true\n            },\n            [name]: {\n                enumerable: true,\n                configurable: true,\n                /**\n                 * @return {?}\n                 */\n                get() {\n                    return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\n                }\n            }\n        });\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Decorator for setting selector options at a method or class level.\n * @param {?} options\n * @return {?}\n */\nfunction SelectorOptions(options) {\n    return (/** @type {?} */ (((/**\n     * @template T\n     * @param {?} target\n     * @param {?} methodName\n     * @param {?} descriptor\n     * @return {?}\n     */\n    function decorate(target, methodName, descriptor) {\n        if (methodName) {\n            // Method Decorator\n            /** @type {?} */\n            const originalFn = descriptor.value || ((/** @type {?} */ (descriptor))).originalFn;\n            if (originalFn) {\n                selectorOptionsMetaAccessor.defineOptions(originalFn, options);\n            }\n        }\n        else {\n            // Class Decorator\n            selectorOptionsMetaAccessor.defineOptions(target, options);\n        }\n    }))));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MetaDataModel$1() { }\nif (false) {\n    /** @type {?} */\n    MetaDataModel$1.prototype.name;\n    /** @type {?} */\n    MetaDataModel$1.prototype.actions;\n    /** @type {?} */\n    MetaDataModel$1.prototype.defaults;\n    /** @type {?} */\n    MetaDataModel$1.prototype.path;\n    /** @type {?|undefined} */\n    MetaDataModel$1.prototype.children;\n}\n/**\n * @record\n */\nfunction SelectorMetaDataModel$1() { }\nif (false) {\n    /** @type {?} */\n    SelectorMetaDataModel$1.prototype.originalFn;\n    /** @type {?} */\n    SelectorMetaDataModel$1.prototype.containerClass;\n    /** @type {?} */\n    SelectorMetaDataModel$1.prototype.selectorName;\n    /** @type {?} */\n    SelectorMetaDataModel$1.prototype.getSelectorOptions;\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction ensureStoreMetadata$1(target) {\n    return ensureStoreMetadata(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction getStoreMetadata$1(target) {\n    return getStoreMetadata(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction ensureSelectorMetadata$1(target) {\n    return ensureSelectorMetadata(target);\n}\n/**\n * @param {?} target\n * @return {?}\n */\nfunction getSelectorMetadata$1(target) {\n    return getSelectorMetadata(target);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Decorator for memoizing a state selector.\n * @template T\n * @param {?=} selectors\n * @return {?}\n */\nfunction Selector(selectors) {\n    return (/**\n     * @template U\n     * @param {?} target\n     * @param {?} key\n     * @param {?} descriptor\n     * @return {?}\n     */\n    (target, key, descriptor) => {\n        // Caretaker note: we have still left the `typeof` condition in order to avoid\n        // creating a breaking change for projects that still use the View Engine.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            /** @type {?} */\n            const isNotMethod = !(descriptor && descriptor.value !== null);\n            if (isNotMethod) {\n                throwSelectorDecoratorError();\n            }\n        }\n        /** @type {?} */\n        const originalFn = descriptor.value;\n        /** @type {?} */\n        const memoizedFn = createSelector(selectors, (/** @type {?} */ (originalFn)), {\n            containerClass: target,\n            selectorName: key.toString(),\n            /**\n             * @return {?}\n             */\n            getSelectorOptions() {\n                return {};\n            }\n        });\n        /** @type {?} */\n        const newDescriptor = {\n            configurable: true,\n            /**\n             * @return {?}\n             */\n            get() {\n                return memoizedFn;\n            }\n        };\n        // Add hidden property to descriptor\n        ((/** @type {?} */ (newDescriptor)))['originalFn'] = originalFn;\n        return newDescriptor;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass StateToken {\n    /**\n     * @param {?} name\n     */\n    constructor(name) {\n        this.name = name;\n        /** @type {?} */\n        const selectorMetadata = ensureSelectorMetadata((/** @type {?} */ (this)));\n        selectorMetadata.makeRootSelector = (/**\n         * @param {?} runtimeContext\n         * @return {?}\n         */\n        (runtimeContext) => {\n            return runtimeContext.getStateGetter(this.name);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * @return {?}\n     */\n    toString() {\n        return `StateToken[${this.name}]`;\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    StateToken.prototype.name;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Action, Actions, InitState, NGXS_PLUGINS, NgxsModule, NgxsSimpleChange, NoopNgxsExecutionStrategy, Select, Selector, SelectorOptions, State, StateStream, StateToken, Store, UpdateState, actionMatcher, createSelector, ensureSelectorMetadata$1 as ensureSelectorMetadata, ensureStoreMetadata$1 as ensureStoreMetadata, getActionTypeFromInstance, getSelectorMetadata$1 as getSelectorMetadata, getStoreMetadata$1 as getStoreMetadata, getValue, ofAction, ofActionCanceled, ofActionCompleted, ofActionDispatched, ofActionErrored, ofActionSuccessful, setValue, OrderedSubject as ɵa, InternalActions as ɵb, ROOT_STATE_TOKEN as ɵc, FEATURE_STATE_TOKEN as ɵd, SELECTOR_META_KEY as ɵe, NgxsConfig as ɵf, mergeDeep as ɵg, USER_PROVIDED_NGXS_EXECUTION_STRATEGY as ɵh, NGXS_EXECUTION_STRATEGY as ɵi, NgxsRootModule as ɵj, StateFactory as ɵk, InternalDispatchedActionResults as ɵl, InternalDispatcher as ɵm, StateContextFactory as ɵn, InternalStateOperations as ɵo, PluginManager as ɵp, InternalNgxsExecutionStrategy as ɵq, SelectFactory as ɵr, ensureStoreMetadata as ɵt, getStoreMetadata as ɵu, ensureSelectorMetadata as ɵv, getSelectorMetadata as ɵw, LifecycleStateManager as ɵx, NgxsFeatureModule as ɵy };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}