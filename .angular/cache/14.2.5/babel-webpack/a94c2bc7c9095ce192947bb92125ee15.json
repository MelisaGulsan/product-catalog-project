{"ast":null,"code":"import { InjectionToken, Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { StateToken, actionMatcher, InitState, UpdateState, getValue, setValue, NGXS_PLUGINS } from '@ngxs/store';\nimport { isPlatformServer } from '@angular/common';\nimport { tap } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @enum {number} */\n\nimport * as Éµngcc0 from '@angular/core';\nconst StorageOption = {\n  LocalStorage: 0,\n  SessionStorage: 1\n};\n/**\n * @record\n */\n\nfunction NgxsStoragePluginOptions() {}\n\nif (false) {\n  /**\n   * Key for the state slice to store in the storage engine.\n   * @type {?|undefined}\n   */\n  NgxsStoragePluginOptions.prototype.key;\n  /**\n   * Storage engine to use. Deaults to localStorage but can provide\n   *\n   * sessionStorage or custom implementation of the StorageEngine interface\n   * @type {?|undefined}\n   */\n\n  NgxsStoragePluginOptions.prototype.storage;\n  /**\n   * Migration strategies.\n   * @type {?|undefined}\n   */\n\n  NgxsStoragePluginOptions.prototype.migrations;\n  /**\n   * Serailizer for the object before its pushed into the engine.\n   * @param {?} obj\n   * @return {?}\n   */\n\n  NgxsStoragePluginOptions.prototype.serialize = function (obj) {};\n  /**\n   * Deserializer for the object before its pulled out of the engine.\n   * @param {?} obj\n   * @return {?}\n   */\n\n\n  NgxsStoragePluginOptions.prototype.deserialize = function (obj) {};\n  /**\n   * Method to alter object before serialization.\n   * @param {?} obj\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  NgxsStoragePluginOptions.prototype.beforeSerialize = function (obj, key) {};\n  /**\n   * Method to alter object after deserialization.\n   * @param {?} obj\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  NgxsStoragePluginOptions.prototype.afterDeserialize = function (obj, key) {};\n}\n/** @type {?} */\n\n\nconst NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('NGXS_STORAGE_PLUGIN_OPTION');\n/** @type {?} */\n\nconst STORAGE_ENGINE = new InjectionToken('STORAGE_ENGINE');\n/**\n * @record\n */\n\nfunction StorageEngine() {}\n\nif (false) {\n  /** @type {?} */\n  StorageEngine.prototype.length;\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n  StorageEngine.prototype.getItem = function (key) {};\n  /**\n   * @param {?} key\n   * @param {?} val\n   * @return {?}\n   */\n\n\n  StorageEngine.prototype.setItem = function (key, val) {};\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  StorageEngine.prototype.removeItem = function (key) {};\n  /**\n   * @return {?}\n   */\n\n\n  StorageEngine.prototype.clear = function () {};\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * If the `key` option is not provided then the below constant\n * will be used as a default key\n * @type {?}\n */\n\n\nconst DEFAULT_STATE_KEY = '@@STATE';\n/**\n * This key is used to retrieve static metadatas on state classes.\n * This constant is taken from the core codebase\n * @type {?}\n */\n\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\n/**\n * @param {?} key\n * @return {?}\n */\n\nfunction transformKeyOption(key) {\n  if (!Array.isArray(key)) {\n    key = [key];\n  }\n\n  return key.map(\n  /**\n  * @param {?} token\n  * @return {?}\n  */\n  token => {\n    // If it has the `NGXS_OPTIONS_META` key then it means the developer\n    // has provided state class like `key: [AuthState]`.\n    if (token.hasOwnProperty(META_OPTIONS_KEY)) {\n      // The `name` property will be an actual state name or a `StateToken`.\n      token =\n      /** @type {?} */\n      token[META_OPTIONS_KEY].name;\n    }\n\n    return token instanceof StateToken ? token.getName() :\n    /** @type {?} */\n    token;\n  });\n}\n/**\n * @param {?} options\n * @return {?}\n */\n\n\nfunction storageOptionsFactory(options) {\n  if (options !== undefined && options.key) {\n    options.key = transformKeyOption(options.key);\n  }\n\n  return Object.assign({\n    key: [DEFAULT_STATE_KEY],\n    storage: 0\n    /* LocalStorage */\n    ,\n    serialize: JSON.stringify,\n    deserialize: JSON.parse,\n    beforeSerialize:\n    /**\n    * @param {?} obj\n    * @return {?}\n    */\n    obj => obj,\n    afterDeserialize:\n    /**\n    * @param {?} obj\n    * @return {?}\n    */\n    obj => obj\n  }, options);\n}\n/**\n * @param {?} options\n * @param {?} platformId\n * @return {?}\n */\n\n\nfunction engineFactory(options, platformId) {\n  if (isPlatformServer(platformId)) {\n    return null;\n  }\n\n  if (options.storage === 0\n  /* LocalStorage */\n  ) {\n    return localStorage;\n  } else if (options.storage === 1\n  /* SessionStorage */\n  ) {\n    return sessionStorage;\n  }\n\n  return null;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet NgxsStoragePlugin = /*#__PURE__*/(() => {\n  class NgxsStoragePlugin {\n    /**\n     * @param {?} _options\n     * @param {?} _engine\n     * @param {?} _platformId\n     */\n    constructor(_options, _engine, _platformId) {\n      this._options = _options;\n      this._engine = _engine;\n      this._platformId = _platformId; // We cast to `string[]` here as we're sure that this option has been\n      // transformed by the `storageOptionsFactory` function that provided token.\n\n      this._keys =\n      /** @type {?} */\n      this._options.key; // We default to `[DEFAULT_STATE_KEY]` if the user explicitly does not provide the `key` option.\n\n      this._usesDefaultStateKey = this._keys.length === 1 && this._keys[0] === DEFAULT_STATE_KEY;\n    }\n    /**\n     * @param {?} state\n     * @param {?} event\n     * @param {?} next\n     * @return {?}\n     */\n\n\n    handle(state, event, next) {\n      if (isPlatformServer(this._platformId) && this._engine === null) {\n        return next(state, event);\n      }\n      /** @type {?} */\n\n\n      const matches = actionMatcher(event);\n      /** @type {?} */\n\n      const isInitAction = matches(InitState);\n      /** @type {?} */\n\n      const isUpdateAction = matches(UpdateState);\n      /** @type {?} */\n\n      const isInitOrUpdateAction = isInitAction || isUpdateAction;\n      /** @type {?} */\n\n      let hasMigration = false;\n\n      if (isInitOrUpdateAction) {\n        /** @type {?} */\n        const addedStates = isUpdateAction && event.addedStates;\n\n        for (const key of this._keys) {\n          // We're checking what states have been added by NGXS and if any of these states should be handled by\n          // the storage plugin. For instance, we only want to deserialize the `auth` state, NGXS has added\n          // the `user` state, the storage plugin will be rerun and will do redundant deserialization.\n          // `usesDefaultStateKey` is necessary to check since `event.addedStates` never contains `@@STATE`.\n          if (!this._usesDefaultStateKey && addedStates && !addedStates.hasOwnProperty(key)) {\n            continue;\n          }\n          /** @type {?} */\n\n\n          let storedValue = this._engine.getItem(\n          /** @type {?} */\n          key);\n\n          if (storedValue !== 'undefined' && storedValue != null) {\n            try {\n              /** @type {?} */\n              const newVal =\n              /** @type {?} */\n              this._options.deserialize(storedValue);\n\n              storedValue =\n              /** @type {?} */\n              this._options.afterDeserialize(newVal, key);\n            } catch (_a) {\n              // Caretaker note: we have still left the `typeof` condition in order to avoid\n              // creating a breaking change for projects that still use the View Engine.\n              if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                console.error(`Error ocurred while deserializing the ${key} store value, falling back to empty object, the value obtained from the store: `, storedValue);\n              }\n\n              storedValue = {};\n            }\n\n            if (this._options.migrations) {\n              this._options.migrations.forEach(\n              /**\n              * @param {?} strategy\n              * @return {?}\n              */\n              strategy => {\n                /** @type {?} */\n                const versionMatch = strategy.version === getValue(storedValue, strategy.versionKey || 'version');\n                /** @type {?} */\n\n                const keyMatch = !strategy.key && this._usesDefaultStateKey || strategy.key === key;\n\n                if (versionMatch && keyMatch) {\n                  storedValue = strategy.migrate(storedValue);\n                  hasMigration = true;\n                }\n              });\n            }\n\n            if (!this._usesDefaultStateKey) {\n              state = setValue(state,\n              /** @type {?} */\n              key, storedValue);\n            } else {\n              // The `UpdateState` action is dispatched whenever the feature state is added.\n              // The below condition is met only when the `UpdateState` is dispatched.\n              // Let's assume that we have 2 states `counter` and `@ngxs/router-plugin` state.\n              // `CounterState` is provided on the root level when calling `NgxsModule.forRoot()`\n              // and `@ngxs/router-plugin` is provided as a feature state.\n              // The storage plugin may save the `counter` state value as `10` before.\n              // The `CounterState` may implement the `ngxsOnInit` hook and call `ctx.setState(999)`.\n              // The storage plugin will re-hydrate the whole state when the `RouterState` is registered,\n              // and the `counter` state will again equal `10` (not `999`).\n              if (storedValue && addedStates && Object.keys(addedStates).length > 0) {\n                storedValue = Object.keys(addedStates).reduce(\n                /**\n                * @param {?} accumulator\n                * @param {?} addedState\n                * @return {?}\n                */\n                (accumulator, addedState) => {\n                  // The `storedValue` may equal the whole state (when the default state key is used).\n                  // If `addedStates` contains only `router` then we want to merge the state only\n                  // with the `router` value.\n                  // Let's assume that the `storedValue` is an object:\n                  // `{ counter: 10, router: {...} }`\n                  // This will pick only the `router` object from the `storedValue` and `counter`\n                  // state will not be re-hydrated unnecessary.\n                  if (storedValue.hasOwnProperty(addedState)) {\n                    accumulator[addedState] = storedValue[addedState];\n                  }\n\n                  return accumulator;\n                },\n                /** @type {?} */\n                {});\n              }\n\n              state = Object.assign({}, state, storedValue);\n            }\n          }\n        }\n      }\n\n      return next(state, event).pipe(tap(\n      /**\n      * @param {?} nextState\n      * @return {?}\n      */\n      nextState => {\n        if (!isInitOrUpdateAction || isInitOrUpdateAction && hasMigration) {\n          for (const key of this._keys) {\n            /** @type {?} */\n            let val = nextState;\n\n            if (key !== DEFAULT_STATE_KEY) {\n              val = getValue(nextState,\n              /** @type {?} */\n              key);\n            }\n\n            try {\n              /** @type {?} */\n              const newVal =\n              /** @type {?} */\n              this._options.beforeSerialize(val, key);\n\n              this._engine.setItem(\n              /** @type {?} */\n              key,\n              /** @type {?} */\n              this._options.serialize(newVal));\n            } catch (error) {\n              // Caretaker note: we have still left the `typeof` condition in order to avoid\n              // creating a breaking change for projects that still use the View Engine.\n              if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                if (error && (error.name === 'QuotaExceededError' || error.name === 'NS_ERROR_DOM_QUOTA_REACHED')) {\n                  console.error(`The ${key} store value exceeds the browser storage quota: `, val);\n                } else {\n                  console.error(`Error ocurred while serializing the ${key} store value, value not updated, the value obtained from the store: `, val);\n                }\n              }\n            }\n          }\n        }\n      }));\n    }\n\n  }\n\n  NgxsStoragePlugin.Éµfac = function NgxsStoragePlugin_Factory(t) {\n    return new (t || NgxsStoragePlugin)(Éµngcc0.ÉµÉµinject(NGXS_STORAGE_PLUGIN_OPTIONS), Éµngcc0.ÉµÉµinject(STORAGE_ENGINE), Éµngcc0.ÉµÉµinject(PLATFORM_ID));\n  };\n\n  NgxsStoragePlugin.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: NgxsStoragePlugin,\n    factory: NgxsStoragePlugin.Éµfac\n  });\n  /** @nocollapse */\n\n  return NgxsStoragePlugin;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  NgxsStoragePlugin.prototype._keys;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxsStoragePlugin.prototype._usesDefaultStateKey;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxsStoragePlugin.prototype._options;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxsStoragePlugin.prototype._engine;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  NgxsStoragePlugin.prototype._platformId;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst USER_OPTIONS = new InjectionToken('USER_OPTIONS');\nlet NgxsStoragePluginModule = /*#__PURE__*/(() => {\n  class NgxsStoragePluginModule {\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    static forRoot(options) {\n      return {\n        ngModule: NgxsStoragePluginModule,\n        providers: [{\n          provide: NGXS_PLUGINS,\n          useClass: NgxsStoragePlugin,\n          multi: true\n        }, {\n          provide: USER_OPTIONS,\n          useValue: options\n        }, {\n          provide: NGXS_STORAGE_PLUGIN_OPTIONS,\n          useFactory: storageOptionsFactory,\n          deps: [USER_OPTIONS]\n        }, {\n          provide: STORAGE_ENGINE,\n          useFactory: engineFactory,\n          deps: [NGXS_STORAGE_PLUGIN_OPTIONS, PLATFORM_ID]\n        }]\n      };\n    }\n\n  }\n\n  NgxsStoragePluginModule.Éµfac = function NgxsStoragePluginModule_Factory(t) {\n    return new (t || NgxsStoragePluginModule)();\n  };\n\n  NgxsStoragePluginModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: NgxsStoragePluginModule\n  });\n  NgxsStoragePluginModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({});\n  return NgxsStoragePluginModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { NGXS_STORAGE_PLUGIN_OPTIONS, NgxsStoragePlugin, NgxsStoragePluginModule, STORAGE_ENGINE, USER_OPTIONS as Éµa, storageOptionsFactory as Éµb, engineFactory as Éµc }; //# sourceMappingURL=ngxs-storage-plugin.js.map","map":null,"metadata":{},"sourceType":"module"}