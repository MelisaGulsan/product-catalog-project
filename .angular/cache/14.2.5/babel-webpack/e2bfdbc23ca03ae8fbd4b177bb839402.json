{"ast":null,"code":"import { Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction isAngularInTestMode() {\n  // This is safe to check for these properties in the following way since `typeof` does not\n  // throw an exception if the value does not exist in the scope.\n  // We should not try to read these values from the global scope (e.g. `ɵglobal` from the `@angular/core`).\n  // This is related to how these frameworks compile and execute modules. E.g. Jest wraps the module into\n  // its internal code where `jest` variable exists in the scope. It cannot be read from the global scope, e.g.\n  // this will return undefined `global.jest`, but `jest` will not equal undefined.\n  return typeof __karma__ !== 'undefined' || typeof jasmine !== 'undefined' || typeof jest !== 'undefined' || typeof Mocha !== 'undefined';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass NgxsBootstrapper {\n  constructor() {\n    /**\n     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n     */\n    this.bootstrap$ = new ReplaySubject(1);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  get appBootstrapped$() {\n    return this.bootstrap$.asObservable();\n  }\n  /**\n   * This event will be emitted after attaching `ComponentRef` of the root component\n   * to the tree of views, that's a signal that application has been fully rendered\n   * @return {?}\n   */\n\n\n  bootstrap() {\n    this.bootstrap$.next(true);\n    this.bootstrap$.complete();\n  }\n\n}\n\nNgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) {\n  return new (t || NgxsBootstrapper)();\n};\n\nNgxsBootstrapper.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NgxsBootstrapper,\n  factory: NgxsBootstrapper.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxsBootstrapper, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nif (false) {\n  /**\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n   * @type {?}\n   * @private\n   */\n  NgxsBootstrapper.prototype.bootstrap$;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\n\n\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n/**\n * @param {?} equalityCheck\n * @param {?} prev\n * @param {?} next\n * @return {?}\n */\n\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n  /** @type {?} */\n\n\n  const length = prev.length;\n\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n * @template T\n * @param {?} func\n * @param {?=} equalityCheck\n * @return {?}\n */\n\n\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n  /** @type {?} */\n  let lastArgs = null;\n  /** @type {?} */\n\n  let lastResult = null; // we reference arguments instead of spreading them for performance reasons\n\n  /**\n   * @return {?}\n   */\n\n  function memoized() {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult =\n      /** @type {?} */\n      func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  }\n\n  /** @type {?} */\n  memoized.reset =\n  /**\n  * @return {?}\n  */\n  function () {\n    // The hidden (for now) ability to reset the memoization\n    lastArgs = null;\n    lastResult = null;\n  };\n\n  return (\n    /** @type {?} */\n    memoized\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN');\n\nclass InitialState {\n  /**\n   * @param {?} state\n   * @return {?}\n   */\n  static set(state) {\n    this.value = state;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  static pop() {\n    /** @type {?} */\n    const state = this.value;\n    this.value = {};\n    return state;\n  }\n\n}\n\nInitialState.value = {};\n\nif (false) {\n  /**\n   * @type {?}\n   * @private\n   */\n  InitialState.value;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\n * @type {?}\n */\n\n\nconst NGXS_STATE_CONTEXT_FACTORY = new InjectionToken('Internals.StateContextFactory');\n/**\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\n * @type {?}\n */\n\nconst NGXS_STATE_FACTORY = new InjectionToken('Internals.StateFactory');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, NgxsBootstrapper, isAngularInTestMode, memoize };","map":{"version":3,"names":["Injectable","InjectionToken","ReplaySubject","ɵngcc0","isAngularInTestMode","__karma__","jasmine","jest","Mocha","NgxsBootstrapper","constructor","bootstrap$","appBootstrapped$","asObservable","bootstrap","next","complete","ɵfac","NgxsBootstrapper_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","prototype","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","length","i","memoize","func","lastArgs","lastResult","memoized","arguments","apply","reset","INITIAL_STATE_TOKEN","InitialState","set","state","value","pop","NGXS_STATE_CONTEXT_FACTORY","NGXS_STATE_FACTORY"],"sources":["/home/melisagulsan/workspace/Project/product-catalog-project/node_modules/@ngxs/store/__ivy_ngcc__/fesm2015/ngxs-store-internals.js"],"sourcesContent":["import { Injectable, InjectionToken } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction isAngularInTestMode() {\n    // This is safe to check for these properties in the following way since `typeof` does not\n    // throw an exception if the value does not exist in the scope.\n    // We should not try to read these values from the global scope (e.g. `ɵglobal` from the `@angular/core`).\n    // This is related to how these frameworks compile and execute modules. E.g. Jest wraps the module into\n    // its internal code where `jest` variable exists in the scope. It cannot be read from the global scope, e.g.\n    // this will return undefined `global.jest`, but `jest` will not equal undefined.\n    return (typeof __karma__ !== 'undefined' ||\n        typeof jasmine !== 'undefined' ||\n        typeof jest !== 'undefined' ||\n        typeof Mocha !== 'undefined');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxsBootstrapper {\n    constructor() {\n        /**\n         * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n         */\n        this.bootstrap$ = new ReplaySubject(1);\n    }\n    /**\n     * @return {?}\n     */\n    get appBootstrapped$() {\n        return this.bootstrap$.asObservable();\n    }\n    /**\n     * This event will be emitted after attaching `ComponentRef` of the root component\n     * to the tree of views, that's a signal that application has been fully rendered\n     * @return {?}\n     */\n    bootstrap() {\n        this.bootstrap$.next(true);\n        this.bootstrap$.complete();\n    }\n}\nNgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) { return new (t || NgxsBootstrapper)(); };\nNgxsBootstrapper.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgxsBootstrapper, factory: NgxsBootstrapper.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxsBootstrapper, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\nif (false) {\n    /**\n     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\n     * @type {?}\n     * @private\n     */\n    NgxsBootstrapper.prototype.bootstrap$;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction defaultEqualityCheck(a, b) {\n    return a === b;\n}\n/**\n * @param {?} equalityCheck\n * @param {?} prev\n * @param {?} next\n * @return {?}\n */\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n        return false;\n    }\n    // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n    /** @type {?} */\n    const length = prev.length;\n    for (let i = 0; i < length; i++) {\n        if (!equalityCheck(prev[i], next[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Memoize a function on its last inputs only.\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\n *\n * @ignore\n * @template T\n * @param {?} func\n * @param {?=} equalityCheck\n * @return {?}\n */\nfunction memoize(func, equalityCheck = defaultEqualityCheck) {\n    /** @type {?} */\n    let lastArgs = null;\n    /** @type {?} */\n    let lastResult = null;\n    // we reference arguments instead of spreading them for performance reasons\n    /**\n     * @return {?}\n     */\n    function memoized() {\n        if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n            // apply arguments instead of spreading for performance.\n            lastResult = ((/** @type {?} */ (func))).apply(null, arguments);\n        }\n        lastArgs = arguments;\n        return lastResult;\n    }\n    ((/** @type {?} */ (memoized))).reset = (/**\n     * @return {?}\n     */\n    function () {\n        // The hidden (for now) ability to reset the memoization\n        lastArgs = null;\n        lastResult = null;\n    });\n    return (/** @type {?} */ (memoized));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst INITIAL_STATE_TOKEN = new InjectionToken('INITIAL_STATE_TOKEN');\nclass InitialState {\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    static set(state) {\n        this.value = state;\n    }\n    /**\n     * @return {?}\n     */\n    static pop() {\n        /** @type {?} */\n        const state = this.value;\n        this.value = {};\n        return state;\n    }\n}\nInitialState.value = {};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    InitialState.value;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\n * @type {?}\n */\nconst NGXS_STATE_CONTEXT_FACTORY = new InjectionToken('Internals.StateContextFactory');\n/**\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\n * @type {?}\n */\nconst NGXS_STATE_FACTORY = new InjectionToken('Internals.StateFactory');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { INITIAL_STATE_TOKEN, InitialState, NGXS_STATE_CONTEXT_FACTORY, NGXS_STATE_FACTORY, NgxsBootstrapper, isAngularInTestMode, memoize };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}